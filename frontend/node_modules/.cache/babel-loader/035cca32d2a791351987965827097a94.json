{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/MenuBar/FlipCameraButton/FlipCameraButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { DEFAULT_VIDEO_CONSTRAINTS } from '../../../constants';\nimport FlipCameraIcon from './FlipCameraIcon';\nimport useMediaStreamTrack from '../../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nimport { useVideoInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nexport default function FlipCameraButton() {\n  _s();\n\n  const {\n    localVideoTrack: videoTrack\n  } = useVideoContext();\n  const [supportsFacingMode, setSupportsFacingMode] = useState(null);\n  const mediaStreamTrack = useMediaStreamTrack(videoTrack);\n  const videoDeviceList = useVideoInputDevices();\n  useEffect(() => {\n    // The 'supportsFacingMode' variable determines if this component is rendered\n    // If 'facingMode' exists, we will set supportsFacingMode to true.\n    // However, if facingMode is ever undefined again (when the user unpublishes video), we\n    // won't set 'supportsFacingMode' to false. This prevents the icon from briefly\n    // disappearing when the user switches their front/rear camera.\n    const currentFacingMode = mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.getSettings().facingMode;\n\n    if (currentFacingMode && supportsFacingMode === null) {\n      setSupportsFacingMode(true);\n    }\n  }, [mediaStreamTrack, supportsFacingMode]);\n  const toggleFacingMode = useCallback(() => {\n    if (videoTrack) {\n      const newFacingMode = (mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.getSettings().facingMode) === 'user' ? 'environment' : 'user';\n      videoTrack.restart({ ...DEFAULT_VIDEO_CONSTRAINTS,\n        facingMode: newFacingMode\n      });\n    }\n  }, [mediaStreamTrack, videoTrack]);\n  return supportsFacingMode && videoDeviceList.length > 1 ? /*#__PURE__*/_jsxDEV(Button, {\n    onClick: toggleFacingMode,\n    disabled: !videoTrack,\n    startIcon: /*#__PURE__*/_jsxDEV(FlipCameraIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 74\n    }, this),\n    children: \"Flip Camera\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this) : null;\n}\n\n_s(FlipCameraButton, \"1Llsyt2fhdkvLdkoiakx+12JM4k=\", false, function () {\n  return [useVideoContext, useMediaStreamTrack, useVideoInputDevices];\n});\n\n_c = FlipCameraButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlipCameraButton\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/MenuBar/FlipCameraButton/FlipCameraButton.tsx"],"names":["React","useCallback","useEffect","useState","Button","DEFAULT_VIDEO_CONSTRAINTS","FlipCameraIcon","useMediaStreamTrack","useVideoContext","useVideoInputDevices","FlipCameraButton","localVideoTrack","videoTrack","supportsFacingMode","setSupportsFacingMode","mediaStreamTrack","videoDeviceList","currentFacingMode","getSettings","facingMode","toggleFacingMode","newFacingMode","restart","length"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,yBAAT,QAA0C,oBAA1C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,wDAAhC;AACA,OAAOC,eAAP,MAA4B,gDAA5B;AACA,SAASC,oBAAT,QAAqC,wCAArC;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AACzC,QAAM;AAAEC,IAAAA,eAAe,EAAEC;AAAnB,MAAkCJ,eAAe,EAAvD;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAiB,IAAjB,CAA5D;AACA,QAAMY,gBAAgB,GAAGR,mBAAmB,CAACK,UAAD,CAA5C;AACA,QAAMI,eAAe,GAAGP,oBAAoB,EAA5C;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA,UAAMe,iBAAiB,GAAGF,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEG,WAAlB,GAAgCC,UAA1D;;AACA,QAAIF,iBAAiB,IAAIJ,kBAAkB,KAAK,IAAhD,EAAsD;AACpDC,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AACF,GAVQ,EAUN,CAACC,gBAAD,EAAmBF,kBAAnB,CAVM,CAAT;AAYA,QAAMO,gBAAgB,GAAGnB,WAAW,CAAC,MAAM;AACzC,QAAIW,UAAJ,EAAgB;AACd,YAAMS,aAAa,GAAG,CAAAN,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEG,WAAlB,GAAgCC,UAAhC,MAA+C,MAA/C,GAAwD,aAAxD,GAAwE,MAA9F;AACAP,MAAAA,UAAU,CAACU,OAAX,CAAmB,EACjB,GAAIjB,yBADa;AAEjBc,QAAAA,UAAU,EAAEE;AAFK,OAAnB;AAID;AACF,GARmC,EAQjC,CAACN,gBAAD,EAAmBH,UAAnB,CARiC,CAApC;AAUA,SAAOC,kBAAkB,IAAIG,eAAe,CAACO,MAAhB,GAAyB,CAA/C,gBACL,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEH,gBAAjB;AAAmC,IAAA,QAAQ,EAAE,CAACR,UAA9C;AAA0D,IAAA,SAAS,eAAE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADK,GAIH,IAJJ;AAKD;;GAjCuBF,gB;UACkBF,e,EAEfD,mB,EACDE,oB;;;KAJFC,gB","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { DEFAULT_VIDEO_CONSTRAINTS } from '../../../constants';\nimport FlipCameraIcon from './FlipCameraIcon';\nimport useMediaStreamTrack from '../../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nimport { useVideoInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\n\nexport default function FlipCameraButton() {\n  const { localVideoTrack: videoTrack } = useVideoContext();\n  const [supportsFacingMode, setSupportsFacingMode] = useState<boolean | null>(null);\n  const mediaStreamTrack = useMediaStreamTrack(videoTrack);\n  const videoDeviceList = useVideoInputDevices();\n\n  useEffect(() => {\n    // The 'supportsFacingMode' variable determines if this component is rendered\n    // If 'facingMode' exists, we will set supportsFacingMode to true.\n    // However, if facingMode is ever undefined again (when the user unpublishes video), we\n    // won't set 'supportsFacingMode' to false. This prevents the icon from briefly\n    // disappearing when the user switches their front/rear camera.\n    const currentFacingMode = mediaStreamTrack?.getSettings().facingMode;\n    if (currentFacingMode && supportsFacingMode === null) {\n      setSupportsFacingMode(true);\n    }\n  }, [mediaStreamTrack, supportsFacingMode]);\n\n  const toggleFacingMode = useCallback(() => {\n    if (videoTrack) {\n      const newFacingMode = mediaStreamTrack?.getSettings().facingMode === 'user' ? 'environment' : 'user';\n      videoTrack.restart({\n        ...(DEFAULT_VIDEO_CONSTRAINTS as {}),\n        facingMode: newFacingMode,\n      });\n    }\n  }, [mediaStreamTrack, videoTrack]);\n\n  return supportsFacingMode && videoDeviceList.length > 1 ? (\n    <Button onClick={toggleFacingMode} disabled={!videoTrack} startIcon={<FlipCameraIcon />}>\n      Flip Camera\n    </Button>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}