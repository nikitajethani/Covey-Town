{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDisclosure, Accordion, AccordionItem, AccordionButton, AccordionPanel, Box, AccordionIcon } from '@chakra-ui/react';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\n\n// import './App.css';\nconst Chat = () => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    socket,\n    messageHistory,\n    players,\n    userName,\n    unseenMessages\n  } = useCoveyAppState();\n  const [message, setMessage] = useState('');\n  const [currentPlayers, setCurrentPlayers] = useState([]);\n  const [receiver, setReceiver] = useState('');\n  const openChat = useCallback(() => {\n    onOpen();\n    socket === null || socket === void 0 ? void 0 : socket.emit('looking at messages');\n  }, [onOpen, socket]);\n  const closeChat = useCallback(() => {\n    onClose();\n    socket === null || socket === void 0 ? void 0 : socket.emit('looking at messages');\n  }, [onClose, socket]);\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a, b) => a.userName < b.userName ? -1 : 1));\n  }, [players]);\n  useEffect(() => {\n    updatePlayers(); // updateUnseen();\n\n    const timer = setInterval(updatePlayers, 2000); // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer); // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n\n  const processUpdates = async () => {\n    if (receiver === 'Everyone') {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPublicMessage', message, userName);\n    } else {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPrivateMessage', message, receiver, userName);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Accordion, {\n      children: [/*#__PURE__*/_jsxDEV(AccordionItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: /*#__PURE__*/_jsxDEV(AccordionButton, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              flex: \"1\",\n              textAlign: \"left\",\n              children: \"Section 1 title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(AccordionIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(AccordionPanel, {\n          pb: 4,\n          children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(AccordionItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: /*#__PURE__*/_jsxDEV(AccordionButton, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              flex: \"1\",\n              textAlign: \"left\",\n              children: \"Section 2 title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(AccordionIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(AccordionPanel, {\n          pb: 4,\n          children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(Chat, \"kyEFKBHsYjLM86XnSR+BIMni6ss=\", false, function () {\n  return [useDisclosure, useCoveyAppState];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx"],"names":["React","useCallback","useEffect","useState","useDisclosure","Accordion","AccordionItem","AccordionButton","AccordionPanel","Box","AccordionIcon","useCoveyAppState","Chat","isOpen","onOpen","onClose","socket","messageHistory","players","userName","unseenMessages","message","setMessage","currentPlayers","setCurrentPlayers","receiver","setReceiver","openChat","emit","closeChat","updatePlayers","sort","a","b","timer","setInterval","clearInterval","processUpdates"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAWEC,aAXF,EAmBEC,SAnBF,EAoBEC,aApBF,EAqBEC,eArBF,EAsBEC,cAtBF,EAuBEC,GAvBF,EAwBEC,aAxBF,QAyBO,kBAzBP;AA4BA,OAAOC,gBAAP,MAA6B,8BAA7B;;AAEA;AAIA,MAAMC,IAA6B,GAAG,MAAM;AAAA;;AAC1C,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA4BX,aAAa,EAA/C;AACA,QAAM;AAACY,IAAAA,MAAD;AAASC,IAAAA,cAAT;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,QAAlC;AAA4CC,IAAAA;AAA5C,MAA8DT,gBAAgB,EAApF;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAW,EAAX,CAApD;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAS,EAAT,CAAxC;AAEA,QAAMwB,QAAQ,GAAG1B,WAAW,CAAC,MAAI;AAC/Ba,IAAAA,MAAM;AACNE,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEY,IAAR,CAAa,qBAAb;AACD,GAH2B,EAGzB,CAACd,MAAD,EAASE,MAAT,CAHyB,CAA5B;AAKA,QAAMa,SAAS,GAAG5B,WAAW,CAAC,MAAI;AAChCc,IAAAA,OAAO;AACPC,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEY,IAAR,CAAa,qBAAb;AACD,GAH4B,EAG1B,CAACb,OAAD,EAAUC,MAAV,CAH0B,CAA7B;AAMA,QAAMc,aAAa,GAAG7B,WAAW,CAAC,MAAM;AACtCuB,IAAAA,iBAAiB,CAACN,OAAO,CAACa,IAAR,CAAa,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACb,QAAF,GAAac,CAAC,CAACd,QAAf,GAA0B,CAAC,CAA3B,GAA6B,CAAnD,CAAD,CAAjB;AACD,GAFgC,EAE9B,CAACD,OAAD,CAF8B,CAAjC;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,aAAa,GADC,CAEd;;AACA,UAAMI,KAAK,GAAGC,WAAW,CAACL,aAAD,EAAgB,IAAhB,CAAzB,CAHc,CAId;AACA;;AAEA,WAAO,MAAM;AACXM,MAAAA,aAAa,CAACF,KAAD,CAAb,CADW,CAEX;AACA;AACD,KAJD;AAKD,GAZQ,EAYN,CAACJ,aAAD,CAZM,CAAT;;AAcA,QAAMO,cAAc,GAAG,YAAW;AAChC,QAAIZ,QAAQ,KAAK,UAAjB,EAA6B;AAC3BT,MAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEY,IAAR,CAAa,mBAAb,EAAkCP,OAAlC,EAA2CF,QAA3C;AACD,KAFD,MAEO;AACLH,MAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEY,IAAR,CAAa,oBAAb,EAAmCP,OAAnC,EAA4CI,QAA5C,EAAsDN,QAAtD;AACD;AACF,GAND;;AAQA,sBAAO;AAAA,2BAIL,QAAC,SAAD;AAAA,8BACF,QAAC,aAAD;AAAA,gCACE;AAAA,iCACE,QAAC,eAAD;AAAA,oCACE,QAAC,GAAD;AAAK,cAAA,IAAI,EAAC,GAAV;AAAc,cAAA,SAAS,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,cAAD;AAAgB,UAAA,EAAE,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADE,eAkBF,QAAC,aAAD;AAAA,gCACE;AAAA,iCACE,QAAC,eAAD;AAAA,oCACE,QAAC,GAAD;AAAK,cAAA,IAAI,EAAC,GAAV;AAAc,cAAA,SAAS,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,cAAD;AAAgB,UAAA,EAAE,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAJK,mBAAP;AAqED,CAlHD;;GAAMP,I;UAC8BR,a,EACkCO,gB;;;KAFhEC,I;AAoHN,eAAeA,IAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  useDisclosure,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  Box,\n  AccordionIcon,\n} from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nimport Player from '../../classes/Player';\n// import './App.css';\n\n\n\nconst Chat: React.FunctionComponent = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n  const {socket, messageHistory, players, userName, unseenMessages} = useCoveyAppState();\n  const [message, setMessage] = useState<string>('');\n  const [currentPlayers, setCurrentPlayers] = useState<Player[]>([]);\n  const [receiver, setReceiver] = useState<string>('');\n\n  const openChat = useCallback(()=>{\n    onOpen();\n    socket?.emit('looking at messages');\n  }, [onOpen, socket]);\n\n  const closeChat = useCallback(()=>{\n    onClose();\n    socket?.emit('looking at messages');\n  }, [onClose, socket]);\n\n\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a,b) => a.userName < b.userName ? -1:1));\n  }, [players]);\n\n\n  useEffect(() => {\n    updatePlayers();\n    // updateUnseen();\n    const timer = setInterval(updatePlayers, 2000);\n    // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer);\n      // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n  \n  const processUpdates = async () =>{\n    if (receiver === 'Everyone') {\n      socket?.emit('sendPublicMessage', message, userName);\n    } else {\n      socket?.emit('sendPrivateMessage', message, receiver, userName)\n    } \n  };\n\n  return <>\n    {/* <MenuItem data-testid='openMenuButton' onClick={openChat}>\n      <Typography variant=\"body1\">Chat</Typography>\n    </MenuItem> */}\n    <Accordion>\n  <AccordionItem>\n    <h2>\n      <AccordionButton>\n        <Box flex=\"1\" textAlign=\"left\">\n          Section 1 title\n        </Box>\n        <AccordionIcon />\n      </AccordionButton>\n    </h2>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.\n    </AccordionPanel>\n  </AccordionItem>\n\n  <AccordionItem>\n    <h2>\n      <AccordionButton>\n        <Box flex=\"1\" textAlign=\"left\">\n          Section 2 title\n        </Box>\n        <AccordionIcon />\n      </AccordionButton>\n    </h2>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.\n    </AccordionPanel>\n  </AccordionItem>\n</Accordion>\n    {/* <Modal isOpen={isOpen} onClose={closeChat}>\n      <ModalContent>\n        <ModalHeader>Chat</ModalHeader>\n        <ModalCloseButton/>\n          <ModalBody pb={6}>\n            \n            {currentPlayers?.map((player) => ( \n              <p key={player.id}> {player.userName} </p>))}  \n\n            <div>\n            {messageHistory?.messageHistory.map((msg) => ( \n              <p key={msg.id}> {msg.from} to {msg.to} <br /> {msg.message}  </p>\n            ))} \n            </div>\n          </ModalBody>\n          <ModalFooter>\n          <FormControl>\n            <FormLabel htmlFor='friendlyName'>To</FormLabel>\n              <Input id='friendlyName' placeholder=\"To\" name=\"receiver\" value={receiver} onChange={(ev)=>setReceiver(ev.target.value)} />\n            </FormControl>\n            <FormControl>\n              <Input id='message' placeholder=\"Message...\" name=\"message\" value={message} onChange={(ev)=>setMessage(ev.target.value)} />\n            </FormControl>\n            <Button data-testid='sendbutton' colorScheme=\"blue\" mr={3} value=\"send\" name='action1' onClick={()=>processUpdates()}>\n              Send\n            </Button>\n          </ModalFooter>\n      </ModalContent>\n    </Modal> */}\n  </>\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}