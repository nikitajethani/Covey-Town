{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/components/DeviceSelectionDialog/VideoInputList/VideoInputList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { FormControl, MenuItem, Typography, Select } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DEFAULT_VIDEO_CONSTRAINTS } from '../../../constants';\nimport VideoTrack from '../../VideoTrack/VideoTrack';\nimport useMediaStreamTrack from '../../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nimport { useVideoInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nimport LocalStorage_TwilioVideo from '../../../../../../classes/LocalStorage/TwilioVideo';\nconst useStyles = makeStyles({\n  preview: {\n    width: '300px',\n    maxHeight: '200px',\n    margin: '0.5em auto',\n    '& video': {\n      maxHeight: '200px'\n    }\n  }\n});\nexport default function VideoInputList() {\n  _s();\n\n  const classes = useStyles();\n  const videoInputDevices = useVideoInputDevices();\n  const {\n    localVideoTrack\n  } = useVideoContext();\n  const mediaStreamTrack = useMediaStreamTrack(localVideoTrack);\n  const localVideoInputDeviceId = mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.getSettings().deviceId;\n  const [lastVideoDeviceId, _setLastVideoDeviceId] = useState(LocalStorage_TwilioVideo.twilioVideoLastCamera);\n  const setLastVideoDeviceId = useCallback(deviceId => {\n    LocalStorage_TwilioVideo.twilioVideoLastCamera = deviceId;\n\n    _setLastVideoDeviceId(deviceId);\n  }, []);\n\n  function replaceTrack(newDeviceId) {\n    setLastVideoDeviceId(newDeviceId);\n\n    if (localVideoTrack) {\n      localVideoTrack.restart({ ...DEFAULT_VIDEO_CONSTRAINTS,\n        deviceId: {\n          exact: newDeviceId\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [localVideoTrack && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.preview,\n      children: /*#__PURE__*/_jsxDEV(VideoTrack, {\n        isLocal: true,\n        track: localVideoTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), videoInputDevices.length > 1 ? /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: \"Video Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        onChange: e => replaceTrack(e.target.value),\n        value: localVideoInputDeviceId || lastVideoDeviceId,\n        variant: \"outlined\",\n        children: videoInputDevices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: device.deviceId,\n          children: device.label\n        }, device.deviceId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: \"Video Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: (localVideoTrack === null || localVideoTrack === void 0 ? void 0 : localVideoTrack.mediaStreamTrack.label) || 'No Local Video'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoInputList, \"3nGyMFbSOJ642L8FV7ig0zzCKGw=\", false, function () {\n  return [useStyles, useVideoInputDevices, useVideoContext, useMediaStreamTrack];\n});\n\n_c = VideoInputList;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoInputList\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/components/DeviceSelectionDialog/VideoInputList/VideoInputList.tsx"],"names":["React","useCallback","useState","FormControl","MenuItem","Typography","Select","makeStyles","DEFAULT_VIDEO_CONSTRAINTS","VideoTrack","useMediaStreamTrack","useVideoContext","useVideoInputDevices","LocalStorage_TwilioVideo","useStyles","preview","width","maxHeight","margin","VideoInputList","classes","videoInputDevices","localVideoTrack","mediaStreamTrack","localVideoInputDeviceId","getSettings","deviceId","lastVideoDeviceId","_setLastVideoDeviceId","twilioVideoLastCamera","setLastVideoDeviceId","replaceTrack","newDeviceId","restart","exact","length","e","target","value","map","device","label"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport {\n  FormControl, MenuItem, Typography, Select,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DEFAULT_VIDEO_CONSTRAINTS } from '../../../constants';\nimport VideoTrack from '../../VideoTrack/VideoTrack';\nimport useMediaStreamTrack from '../../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nimport { useVideoInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nimport LocalStorage_TwilioVideo from '../../../../../../classes/LocalStorage/TwilioVideo';\n\nconst useStyles = makeStyles({\n  preview: {\n    width: '300px',\n    maxHeight: '200px',\n    margin: '0.5em auto',\n    '& video': {\n      maxHeight: '200px',\n    },\n  },\n});\n\nexport default function VideoInputList() {\n  const classes = useStyles();\n  const videoInputDevices = useVideoInputDevices();\n  const { localVideoTrack } = useVideoContext();\n  const mediaStreamTrack = useMediaStreamTrack(localVideoTrack);\n  const localVideoInputDeviceId = mediaStreamTrack?.getSettings().deviceId;\n  const [lastVideoDeviceId, _setLastVideoDeviceId] = useState<string | null>(\n    LocalStorage_TwilioVideo.twilioVideoLastCamera,\n  );\n\n  const setLastVideoDeviceId = useCallback((deviceId: string | null) => {\n    LocalStorage_TwilioVideo.twilioVideoLastCamera = deviceId;\n    _setLastVideoDeviceId(deviceId);\n  }, []);\n\n  function replaceTrack(newDeviceId: string) {\n    setLastVideoDeviceId(newDeviceId);\n    if (localVideoTrack) {\n      localVideoTrack.restart({\n        ...(DEFAULT_VIDEO_CONSTRAINTS as {}),\n        deviceId: { exact: newDeviceId },\n      });\n    }\n  }\n\n  return (\n    <div>\n      {localVideoTrack && (\n        <div className={classes.preview}>\n          <VideoTrack isLocal track={localVideoTrack} />\n        </div>\n      )}\n      {videoInputDevices.length > 1 ? (\n        <FormControl fullWidth>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Video Input\n          </Typography>\n          <Select\n            onChange={(e) => replaceTrack(e.target.value as string)}\n            value={localVideoInputDeviceId || lastVideoDeviceId}\n            variant=\"outlined\"\n          >\n            {videoInputDevices.map((device) => (\n              <MenuItem value={device.deviceId} key={device.deviceId}>\n                {device.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      ) : (\n        <>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Video Input\n          </Typography>\n          <Typography>{localVideoTrack?.mediaStreamTrack.label || 'No Local Video'}</Typography>\n        </>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}