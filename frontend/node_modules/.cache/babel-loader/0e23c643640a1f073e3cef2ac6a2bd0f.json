{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport LocalStorage_TwilioVideo from '../../../../../classes/LocalStorage/TwilioVideo';\nimport useIsTrackEnabled from '../useIsTrackEnabled/useIsTrackEnabled';\nimport useVideoContext from '../useVideoContext/useVideoContext';\nexport default function useLocalAudioToggle() {\n  _s();\n\n  const {\n    // @ts-ignore\n    localAudioTrack: audioTrack,\n    room: {\n      localParticipant\n    },\n    getLocalAudioTrack,\n    // @ts-ignore\n    removeLocalAudioTrack\n  } = useVideoContext();\n  const isEnabled = useIsTrackEnabled(audioTrack);\n  const [isPublishing, setIsPublishing] = useState(false);\n  const stopAudio = useCallback(() => {\n    if (audioTrack) {\n      var _audioTrack$mediaStre;\n\n      LocalStorage_TwilioVideo.twilioVideoLastMic = (_audioTrack$mediaStre = audioTrack.mediaStreamTrack.getSettings().deviceId) !== null && _audioTrack$mediaStre !== void 0 ? _audioTrack$mediaStre : null;\n      const localTrackPublication = localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.unpublishTrack(audioTrack); // TODO: remove when SDK implements this event. See: https://issues.corp.twilio.com/browse/JSDK-2592\n\n      localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.emit('trackUnpublished', localTrackPublication);\n      removeLocalAudioTrack();\n    }\n  }, [audioTrack, localParticipant, removeLocalAudioTrack]);\n  const toggleAudioEnabled = useCallback(async () => {\n    if (!isPublishing) {\n      if (audioTrack) {\n        stopAudio();\n        LocalStorage_TwilioVideo.twilioVideoMicEnabled = false;\n      } else {\n        setIsPublishing(true);\n\n        try {\n          var _LocalStorage_TwilioV;\n\n          LocalStorage_TwilioVideo.twilioVideoMicEnabled = true;\n          const track = await getLocalAudioTrack((_LocalStorage_TwilioV = LocalStorage_TwilioVideo.twilioVideoLastMic) !== null && _LocalStorage_TwilioV !== void 0 ? _LocalStorage_TwilioV : undefined);\n          localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.publishTrack(track, {\n            priority: 'low'\n          });\n        } catch (e) {\n          if ((e === null || e === void 0 ? void 0 : e.name) === 'NotReadableError' || (e === null || e === void 0 ? void 0 : e.name) === 'OverconstrainedError') {\n            LocalStorage_TwilioVideo.twilioVideoLastMic = null;\n          }\n\n          throw e;\n        } finally {\n          setIsPublishing(false);\n        }\n      }\n    }\n  }, [audioTrack, getLocalAudioTrack, isPublishing, localParticipant, stopAudio]);\n  return {\n    isEnabled,\n    toggleAudioEnabled,\n    stopAudio\n  };\n}\n\n_s(useLocalAudioToggle, \"5gQe/cSzJS3R8Rnv4jWdWGBrqoY=\", false, function () {\n  return [useVideoContext, useIsTrackEnabled];\n});","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/hooks/useLocalAudioToggle/useLocalAudioToggle.tsx"],"names":["useCallback","useState","LocalStorage_TwilioVideo","useIsTrackEnabled","useVideoContext","useLocalAudioToggle","localAudioTrack","audioTrack","room","localParticipant","getLocalAudioTrack","removeLocalAudioTrack","isEnabled","isPublishing","setIsPublishing","stopAudio","twilioVideoLastMic","mediaStreamTrack","getSettings","deviceId","localTrackPublication","unpublishTrack","emit","toggleAudioEnabled","twilioVideoMicEnabled","track","undefined","publishTrack","priority","e","name"],"mappings":";;AAAA,SAASA,WAAT,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,wBAAP,MAAqC,iDAArC;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAAA;;AAC5C,QAAM;AACJ;AACAC,IAAAA,eAAe,EAAEC,UAFb;AAGJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF,KAHF;AAIJC,IAAAA,kBAJI;AAKJ;AACAC,IAAAA;AANI,MAOFP,eAAe,EAPnB;AAQA,QAAMQ,SAAS,GAAGT,iBAAiB,CAACI,UAAD,CAAnC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMc,SAAS,GAAGf,WAAW,CAAC,MAAM;AAClC,QAAIO,UAAJ,EAAgB;AAAA;;AACdL,MAAAA,wBAAwB,CAACc,kBAAzB,4BAA8CT,UAAU,CAACU,gBAAX,CAA4BC,WAA5B,GAA0CC,QAAxF,yEAAoG,IAApG;AACA,YAAMC,qBAAqB,GAAGX,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEY,cAAlB,CAAiCd,UAAjC,CAA9B,CAFc,CAGd;;AACAE,MAAAA,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEa,IAAlB,CAAuB,kBAAvB,EAA2CF,qBAA3C;AACAT,MAAAA,qBAAqB;AACtB;AACF,GAR4B,EAQ1B,CAACJ,UAAD,EAAaE,gBAAb,EAA+BE,qBAA/B,CAR0B,CAA7B;AAUA,QAAMY,kBAAkB,GAAGvB,WAAW,CAAC,YAAY;AACjD,QAAI,CAACa,YAAL,EAAmB;AACjB,UAAIN,UAAJ,EAAgB;AACdQ,QAAAA,SAAS;AACTb,QAAAA,wBAAwB,CAACsB,qBAAzB,GAAiD,KAAjD;AACD,OAHD,MAGO;AACLV,QAAAA,eAAe,CAAC,IAAD,CAAf;;AACA,YAAI;AAAA;;AACFZ,UAAAA,wBAAwB,CAACsB,qBAAzB,GAAiD,IAAjD;AACA,gBAAMC,KAAK,GAAG,MAAMf,kBAAkB,0BAACR,wBAAwB,CAACc,kBAA1B,yEAAgDU,SAAhD,CAAtC;AACAjB,UAAAA,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEkB,YAAlB,CAA+BF,KAA/B,EAAsC;AAAEG,YAAAA,QAAQ,EAAE;AAAZ,WAAtC;AACD,SAJD,CAIE,OAAOC,CAAP,EAAU;AACV,cAAI,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEC,IAAH,MAAY,kBAAZ,IAAkC,CAAAD,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEC,IAAH,MAAY,sBAAlD,EAA0E;AACxE5B,YAAAA,wBAAwB,CAACc,kBAAzB,GAA8C,IAA9C;AACD;;AACD,gBAAMa,CAAN;AACD,SATD,SASU;AACRf,UAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF;AACF;AACF,GArBqC,EAqBnC,CAACP,UAAD,EAAaG,kBAAb,EAAiCG,YAAjC,EAA+CJ,gBAA/C,EAAiEM,SAAjE,CArBmC,CAAtC;AAuBA,SAAO;AAAEH,IAAAA,SAAF;AAAaW,IAAAA,kBAAb;AAAiCR,IAAAA;AAAjC,GAAP;AACD;;GA9CuBV,mB;UAQlBD,e,EACcD,iB","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport LocalStorage_TwilioVideo from '../../../../../classes/LocalStorage/TwilioVideo';\nimport useIsTrackEnabled from '../useIsTrackEnabled/useIsTrackEnabled';\nimport useVideoContext from '../useVideoContext/useVideoContext';\n\nexport default function useLocalAudioToggle() {\n  const {\n    // @ts-ignore\n    localAudioTrack: audioTrack,\n    room: { localParticipant },\n    getLocalAudioTrack,\n    // @ts-ignore\n    removeLocalAudioTrack,\n  } = useVideoContext();\n  const isEnabled = useIsTrackEnabled(audioTrack);\n  const [isPublishing, setIsPublishing] = useState(false);\n\n  const stopAudio = useCallback(() => {\n    if (audioTrack) {\n      LocalStorage_TwilioVideo.twilioVideoLastMic = audioTrack.mediaStreamTrack.getSettings().deviceId ?? null;\n      const localTrackPublication = localParticipant?.unpublishTrack(audioTrack);\n      // TODO: remove when SDK implements this event. See: https://issues.corp.twilio.com/browse/JSDK-2592\n      localParticipant?.emit('trackUnpublished', localTrackPublication);\n      removeLocalAudioTrack();\n    }\n  }, [audioTrack, localParticipant, removeLocalAudioTrack]);\n\n  const toggleAudioEnabled = useCallback(async () => {\n    if (!isPublishing) {\n      if (audioTrack) {\n        stopAudio();\n        LocalStorage_TwilioVideo.twilioVideoMicEnabled = false;\n      } else {\n        setIsPublishing(true);\n        try {\n          LocalStorage_TwilioVideo.twilioVideoMicEnabled = true;\n          const track = await getLocalAudioTrack(LocalStorage_TwilioVideo.twilioVideoLastMic ?? undefined);\n          localParticipant?.publishTrack(track, { priority: 'low' });\n        } catch (e) {\n          if (e?.name === 'NotReadableError' || e?.name === 'OverconstrainedError') {\n            LocalStorage_TwilioVideo.twilioVideoLastMic = null;\n          }\n          throw e;\n        } finally {\n          setIsPublishing(false);\n        }\n      }\n    }\n  }, [audioTrack, getLocalAudioTrack, isPublishing, localParticipant, stopAudio]);\n\n  return { isEnabled, toggleAudioEnabled, stopAudio } as const;\n}\n"]},"metadata":{},"sourceType":"module"}