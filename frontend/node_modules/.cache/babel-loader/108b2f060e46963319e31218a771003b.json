{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { Button, FormControl, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure } from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState'; // import useMaybeVideo from '../../hooks/useMaybeVideo';\n\nconst Chat = () => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure(); //   const video = useMaybeVideo()\n\n  const {\n    currentTownIsPubliclyListed,\n    socket,\n    messageHistory,\n    players\n  } = useCoveyAppState();\n  const [message, setMessage] = useState('');\n  const [isPubliclyListed, setIsPubliclyListed] = useState(currentTownIsPubliclyListed);\n  const [receiver, setReceiver] = useState('');\n  const openChat = useCallback(() => {\n    onOpen();\n  }, [onOpen]);\n  const closeChat = useCallback(() => {\n    onClose();\n  }, [onClose]); // const toast = useToast()\n\n  const processUpdates = async action => {\n    if (action === 'send') {\n      socket === null || socket === void 0 ? void 0 : socket.emit('chat message', message); // socket?.emit('publicMessage', message)\n      // closeSettings();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      \"data-testid\": \"openMenuButton\",\n      onClick: openChat,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onClose: closeChat,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: ev => {\n            ev.preventDefault();\n            processUpdates('edit');\n          },\n          children: [/*#__PURE__*/_jsxDEV(ModalBody, {\n            pb: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                htmlFor: \"friendlyName\",\n                children: \"To\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"friendlyName\",\n                placeholder: \"To\",\n                name: \"receiver\",\n                value: receiver,\n                onChange: ev => setReceiver(ev.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                id: \"message\",\n                placeholder: \"Message...\",\n                name: \"message\",\n                value: message,\n                onChange: ev => setMessage(ev.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              \"data-testid\": \"sendbutton\",\n              colorScheme: \"blue\",\n              mr: 3,\n              value: \"send\",\n              name: \"action1\",\n              onClick: () => processUpdates('send'),\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Chat, \"3ORbxf6a6MkQ9zGvcwEHbg0n6R8=\", false, function () {\n  return [useDisclosure, useCoveyAppState];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx"],"names":["React","useCallback","useState","Button","FormControl","FormLabel","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useDisclosure","MenuItem","Typography","useCoveyAppState","Chat","isOpen","onOpen","onClose","currentTownIsPubliclyListed","socket","messageHistory","players","message","setMessage","isPubliclyListed","setIsPubliclyListed","receiver","setReceiver","openChat","closeChat","processUpdates","action","emit","ev","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport Draggable from 'react-draggable';\n\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  useToast,\n  Table,\n  TableCaption,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr\n} from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\n// import useMaybeVideo from '../../hooks/useMaybeVideo';\n\nconst Chat: React.FunctionComponent = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n//   const video = useMaybeVideo()\n  const {currentTownIsPubliclyListed, socket, messageHistory, players} = useCoveyAppState();\n  const [message, setMessage] = useState<string>('');\n  const [isPubliclyListed, setIsPubliclyListed] = useState<boolean>(currentTownIsPubliclyListed);\n  const [receiver, setReceiver] = useState<string>('');\n\n\n\n  const openChat = useCallback(()=>{\n    onOpen();\n  }, [onOpen]);\n\n  const closeChat = useCallback(()=>{\n    onClose();\n  }, [onClose]);\n\n  \n\n  // const toast = useToast()\n  const processUpdates = async (action: string) =>{\n    if(action === 'send'){\n      socket?.emit('chat message', message);\n      // socket?.emit('publicMessage', message)\n        // closeSettings();\n     \n    }\n  };\n\n  return <>\n    <MenuItem data-testid='openMenuButton' onClick={openChat}>\n      <Typography variant=\"body1\">Chat</Typography>\n    </MenuItem>\n    <Modal isOpen={isOpen} onClose={closeChat}>\n      <ModalOverlay/>\n      <ModalContent>\n        <ModalHeader>Chat</ModalHeader>\n        <ModalCloseButton/>\n        {/* <p> {messageHistory} </p> */}\n        <form onSubmit={(ev)=>{ev.preventDefault(); processUpdates('edit')}}>\n          <ModalBody pb={6}>\n          {/* <Table>\n                <TableCaption placement=\"bottom\">Publicly Listed Towns</TableCaption>\n                <Thead><Tr><Th>Room Name</Th><Th>Room ID</Th><Th>Activity</Th></Tr></Thead>\n                <Tbody>\n                  {messageHistory?.map((msg) => (\n                    <Tr key={msg.from}><Td role='cell'>{msg.from}</Td><Td\n                      role='cell'>{msg.message}</Td>\n                      <Td role='cell'>{town.currentOccupancy}/{town.maximumOccupancy}\n                      </Td></Tr>\n                  ))}\n                </Tbody>\n              </Table> */}\n            \n          </ModalBody>\n          <ModalFooter>\n          <FormControl>\n            <FormLabel htmlFor='friendlyName'>To</FormLabel>\n              <Input id='friendlyName' placeholder=\"To\" name=\"receiver\" value={receiver} onChange={(ev)=>setReceiver(ev.target.value)} />\n            </FormControl>\n\n          {/* <FormControl mt={4}>\n              <FormLabel htmlFor='isPubliclyListed'>Publicly Listed</FormLabel>\n              <Checkbox id=\"isPubliclyListed\" name=\"isPubliclyListed\"  isChecked={isPubliclyListed} onChange={(e)=>setIsPubliclyListed(e.target.checked)} />\n            </FormControl> */}\n\n            <FormControl>\n              <Input id='message' placeholder=\"Message...\" name=\"message\" value={message} onChange={(ev)=>setMessage(ev.target.value)} />\n            </FormControl>\n            <Button data-testid='sendbutton' colorScheme=\"blue\" mr={3} value=\"send\" name='action1' onClick={()=>processUpdates('send')}>\n              Send\n            </Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  </>\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}