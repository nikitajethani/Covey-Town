{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nexport default function useParticipantIsReconnecting(participant) {\n  _s();\n\n  const [isReconnecting, setIsReconnecting] = useState(false);\n  useEffect(() => {\n    const handleReconnecting = () => setIsReconnecting(true);\n\n    const handleReconnected = () => setIsReconnecting(false);\n\n    handleReconnected(); // Reset state when there is a new participant\n\n    participant.on('reconnecting', handleReconnecting);\n    participant.on('reconnected', handleReconnected);\n    return () => {\n      participant.off('reconnecting', handleReconnecting);\n      participant.off('reconnected', handleReconnected);\n    };\n  }, [participant]);\n  return isReconnecting;\n}\n\n_s(useParticipantIsReconnecting, \"CDhJLvX1uOeGPftWAUyDlF8DKNM=\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/hooks/useParticipantIsReconnecting/useParticipantIsReconnecting.ts"],"names":["useEffect","useState","useParticipantIsReconnecting","participant","isReconnecting","setIsReconnecting","handleReconnecting","handleReconnected","on","off"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,eAAe,SAASC,4BAAT,CAAsCC,WAAtC,EAAgE;AAAA;;AAC7E,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,KAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,kBAAkB,GAAG,MAAMD,iBAAiB,CAAC,IAAD,CAAlD;;AACA,UAAME,iBAAiB,GAAG,MAAMF,iBAAiB,CAAC,KAAD,CAAjD;;AAEAE,IAAAA,iBAAiB,GAJH,CAIO;;AAErBJ,IAAAA,WAAW,CAACK,EAAZ,CAAe,cAAf,EAA+BF,kBAA/B;AACAH,IAAAA,WAAW,CAACK,EAAZ,CAAe,aAAf,EAA8BD,iBAA9B;AACA,WAAO,MAAM;AACXJ,MAAAA,WAAW,CAACM,GAAZ,CAAgB,cAAhB,EAAgCH,kBAAhC;AACAH,MAAAA,WAAW,CAACM,GAAZ,CAAgB,aAAhB,EAA+BF,iBAA/B;AACD,KAHD;AAID,GAZQ,EAYN,CAACJ,WAAD,CAZM,CAAT;AAcA,SAAOC,cAAP;AACD;;GAlBuBF,4B","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Participant } from 'twilio-video';\n\nexport default function useParticipantIsReconnecting(participant: Participant) {\n  const [isReconnecting, setIsReconnecting] = useState(false);\n\n  useEffect(() => {\n    const handleReconnecting = () => setIsReconnecting(true);\n    const handleReconnected = () => setIsReconnecting(false);\n\n    handleReconnected(); // Reset state when there is a new participant\n\n    participant.on('reconnecting', handleReconnecting);\n    participant.on('reconnected', handleReconnected);\n    return () => {\n      participant.off('reconnecting', handleReconnecting);\n      participant.off('reconnected', handleReconnected);\n    };\n  }, [participant]);\n\n  return isReconnecting;\n}\n"]},"metadata":{},"sourceType":"module"}