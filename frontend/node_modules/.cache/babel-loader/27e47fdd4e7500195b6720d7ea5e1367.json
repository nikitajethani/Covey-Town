{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button, useDisclosure, Popover, PopoverTrigger, PopoverContent, PopoverHeader, PopoverArrow, PopoverCloseButton, PopoverBody } from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\n\n// import './App.css';\nconst Chat = () => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    socket,\n    messageHistory,\n    players,\n    userName,\n    unseenMessages\n  } = useCoveyAppState();\n  const [message, setMessage] = useState('');\n  const [currentPlayers, setCurrentPlayers] = useState([]);\n  const [receiver, setReceiver] = useState('');\n  const openChat = useCallback(() => {\n    onOpen();\n    socket === null || socket === void 0 ? void 0 : socket.emit('looking at messages');\n  }, [onOpen, socket]);\n  const closeChat = useCallback(() => {\n    onClose();\n    socket === null || socket === void 0 ? void 0 : socket.emit('looking at messages');\n  }, [onClose, socket]);\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a, b) => a.userName < b.userName ? -1 : 1));\n  }, [players]);\n  useEffect(() => {\n    updatePlayers(); // updateUnseen();\n\n    const timer = setInterval(updatePlayers, 2000); // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer); // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n\n  const processUpdates = async () => {\n    if (receiver === 'Everyone') {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPublicMessage', message, userName);\n    } else {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPrivateMessage', message, receiver, userName);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      \"data-testid\": \"openMenuButton\",\n      onClick: openChat,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Popover, {\n      placement: \"top-start\",\n      children: [/*#__PURE__*/_jsxDEV(PopoverTrigger, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Click me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PopoverContent, {\n        children: [/*#__PURE__*/_jsxDEV(PopoverHeader, {\n          fontWeight: \"semibold\",\n          children: \"Popover placement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(PopoverArrow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(PopoverCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(PopoverBody, {\n          children: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Chat, \"kyEFKBHsYjLM86XnSR+BIMni6ss=\", false, function () {\n  return [useDisclosure, useCoveyAppState];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx"],"names":["React","useCallback","useEffect","useState","Button","useDisclosure","Popover","PopoverTrigger","PopoverContent","PopoverHeader","PopoverArrow","PopoverCloseButton","PopoverBody","MenuItem","Typography","useCoveyAppState","Chat","isOpen","onOpen","onClose","socket","messageHistory","players","userName","unseenMessages","message","setMessage","currentPlayers","setCurrentPlayers","receiver","setReceiver","openChat","emit","closeChat","updatePlayers","sort","a","b","timer","setInterval","clearInterval","processUpdates"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  useDisclosure,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n} from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nimport Player from '../../classes/Player';\n// import './App.css';\n\n\n\nconst Chat: React.FunctionComponent = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n  const {socket, messageHistory, players, userName, unseenMessages} = useCoveyAppState();\n  const [message, setMessage] = useState<string>('');\n  const [currentPlayers, setCurrentPlayers] = useState<Player[]>([]);\n  const [receiver, setReceiver] = useState<string>('');\n\n  const openChat = useCallback(()=>{\n    onOpen();\n    socket?.emit('looking at messages');\n  }, [onOpen, socket]);\n\n  const closeChat = useCallback(()=>{\n    onClose();\n    socket?.emit('looking at messages');\n  }, [onClose, socket]);\n\n\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a,b) => a.userName < b.userName ? -1:1));\n  }, [players]);\n\n\n  useEffect(() => {\n    updatePlayers();\n    // updateUnseen();\n    const timer = setInterval(updatePlayers, 2000);\n    // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer);\n      // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n  \n  const processUpdates = async () =>{\n    if (receiver === 'Everyone') {\n      socket?.emit('sendPublicMessage', message, userName);\n    } else {\n      socket?.emit('sendPrivateMessage', message, receiver, userName)\n    } \n  };\n\n  return <>\n    <MenuItem data-testid='openMenuButton' onClick={openChat}>\n      <Typography variant=\"body1\">Chat</Typography>\n    </MenuItem>\n    <Popover placement=\"top-start\">\n    <PopoverTrigger>\n      <Button>Click me</Button>\n    </PopoverTrigger>\n    <PopoverContent>\n      <PopoverHeader fontWeight=\"semibold\">Popover placement</PopoverHeader>\n      <PopoverArrow />\n      <PopoverCloseButton />\n      <PopoverBody>\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore.\n      </PopoverBody>\n    </PopoverContent>\n  </Popover>\n    {/* <Modal isOpen={isOpen} onClose={closeChat}>\n      <ModalContent>\n        <ModalHeader>Chat</ModalHeader>\n        <ModalCloseButton/>\n          <ModalBody pb={6}>\n            \n            {currentPlayers?.map((player) => ( \n              <p key={player.id}> {player.userName} </p>))}  \n\n            <div>\n            {messageHistory?.messageHistory.map((msg) => ( \n              <p key={msg.id}> {msg.from} to {msg.to} <br /> {msg.message}  </p>\n            ))} \n            </div>\n          </ModalBody>\n          <ModalFooter>\n          <FormControl>\n            <FormLabel htmlFor='friendlyName'>To</FormLabel>\n              <Input id='friendlyName' placeholder=\"To\" name=\"receiver\" value={receiver} onChange={(ev)=>setReceiver(ev.target.value)} />\n            </FormControl>\n            <FormControl>\n              <Input id='message' placeholder=\"Message...\" name=\"message\" value={message} onChange={(ev)=>setMessage(ev.target.value)} />\n            </FormControl>\n            <Button data-testid='sendbutton' colorScheme=\"blue\" mr={3} value=\"send\" name='action1' onClick={()=>processUpdates()}>\n              Send\n            </Button>\n          </ModalFooter>\n      </ModalContent>\n    </Modal> */}\n  </>\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}