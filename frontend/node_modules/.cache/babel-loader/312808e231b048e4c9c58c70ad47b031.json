{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { Button, Checkbox, FormControl, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure, useToast } from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState'; // import useMaybeVideo from '../../hooks/useMaybeVideo';\n\nconst Chat = () => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure(); //   const video = useMaybeVideo()\n\n  const {\n    apiClient,\n    currentTownID,\n    currentTownFriendlyName,\n    currentTownIsPubliclyListed\n  } = useCoveyAppState();\n  const [friendlyName, setFriendlyName] = useState(currentTownFriendlyName);\n  const [isPubliclyListed, setIsPubliclyListed] = useState(currentTownIsPubliclyListed);\n  const [roomUpdatePassword, setRoomUpdatePassword] = useState('');\n  const openChat = useCallback(() => {\n    onOpen();\n  }, [onOpen]);\n  const closeChat = useCallback(() => {\n    onClose();\n  }, [onClose]);\n  const toast = useToast();\n\n  const processUpdates = async action => {\n    if (action === 'delete') {\n      try {\n        await apiClient.deleteTown({\n          coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword\n        });\n        toast({\n          title: 'Town deleted',\n          status: 'success'\n        }); // closeSettings();\n      } catch (err) {\n        toast({\n          title: 'Unable to delete town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    } else {\n      try {\n        await apiClient.updateTown({\n          coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword,\n          friendlyName,\n          isPubliclyListed\n        });\n        toast({\n          title: 'Town updated',\n          description: 'To see the updated town, please exit and re-join this town',\n          status: 'success'\n        }); // closeSettings();\n      } catch (err) {\n        toast({\n          title: 'Unable to update town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      \"data-testid\": \"openMenuButton\",\n      onClick: openChat,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Draggable, {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isOpen,\n        onClose: closeChat,\n        children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: ev => {\n              ev.preventDefault();\n              processUpdates('edit');\n            },\n            children: [/*#__PURE__*/_jsxDEV(ModalBody, {\n              pb: 6,\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"friendlyName\",\n                  children: \"Friendly Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  id: \"friendlyName\",\n                  placeholder: \"Friendly Name\",\n                  name: \"friendlyName\",\n                  value: friendlyName,\n                  onChange: ev => setFriendlyName(ev.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                mt: 4,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"isPubliclyListed\",\n                  children: \"Publicly Listed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                  id: \"isPubliclyListed\",\n                  name: \"isPubliclyListed\",\n                  isChecked: isPubliclyListed,\n                  onChange: e => setIsPubliclyListed(e.target.checked)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                isRequired: true,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"updatePassword\",\n                  children: \"Town Update Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  \"data-testid\": \"updatePassword\",\n                  id: \"updatePassword\",\n                  placeholder: \"Password\",\n                  name: \"password\",\n                  type: \"password\",\n                  value: roomUpdatePassword,\n                  onChange: e => setRoomUpdatePassword(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                \"data-testid\": \"deletebutton\",\n                colorScheme: \"red\",\n                mr: 3,\n                value: \"delete\",\n                name: \"action1\",\n                onClick: () => processUpdates('delete'),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                \"data-testid\": \"updatebutton\",\n                colorScheme: \"blue\",\n                mr: 3,\n                value: \"update\",\n                name: \"action2\",\n                onClick: () => processUpdates('edit'),\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: closeChat,\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Chat, \"tJQVFRbKxplVicUsUI6DyOaqrng=\", false, function () {\n  return [useDisclosure, useCoveyAppState, useToast];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx"],"names":["React","useCallback","useState","Draggable","Button","Checkbox","FormControl","FormLabel","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useDisclosure","useToast","MenuItem","Typography","useCoveyAppState","Chat","isOpen","onOpen","onClose","apiClient","currentTownID","currentTownFriendlyName","currentTownIsPubliclyListed","friendlyName","setFriendlyName","isPubliclyListed","setIsPubliclyListed","roomUpdatePassword","setRoomUpdatePassword","openChat","closeChat","toast","processUpdates","action","deleteTown","coveyTownID","coveyTownPassword","title","status","err","description","toString","updateTown","ev","preventDefault","target","value","e","checked"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,SACEC,MADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,SAJF,EAKEC,KALF,EAMEC,KANF,EAOEC,SAPF,EAQEC,gBARF,EASEC,YATF,EAUEC,WAVF,EAWEC,WAXF,EAYEC,YAZF,EAaEC,aAbF,EAcEC,QAdF,QAeO,kBAfP;AAgBA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B,C,CACA;;AAEA,MAAMC,IAA6B,GAAG,MAAM;AAAA;;AAC1C,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA4BR,aAAa,EAA/C,CAD0C,CAE5C;;AACE,QAAM;AAACS,IAAAA,SAAD;AAAYC,IAAAA,aAAZ;AAA2BC,IAAAA,uBAA3B;AAAoDC,IAAAA;AAApD,MAAmFR,gBAAgB,EAAzG;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkC5B,QAAQ,CAASyB,uBAAT,CAAhD;AACA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0C9B,QAAQ,CAAU0B,2BAAV,CAAxD;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8ChC,QAAQ,CAAS,EAAT,CAA5D;AAIA,QAAMiC,QAAQ,GAAGlC,WAAW,CAAC,MAAI;AAC/BsB,IAAAA,MAAM;AACP,GAF2B,EAEzB,CAACA,MAAD,CAFyB,CAA5B;AAIA,QAAMa,SAAS,GAAGnC,WAAW,CAAC,MAAI;AAChCuB,IAAAA,OAAO;AACR,GAF4B,EAE1B,CAACA,OAAD,CAF0B,CAA7B;AAIA,QAAMa,KAAK,GAAGpB,QAAQ,EAAtB;;AACA,QAAMqB,cAAc,GAAG,MAAOC,MAAP,IAAyB;AAC9C,QAAGA,MAAM,KAAK,QAAd,EAAuB;AACrB,UAAG;AACD,cAAMd,SAAS,CAACe,UAAV,CAAqB;AAACC,UAAAA,WAAW,EAAEf,aAAd;AACzBgB,UAAAA,iBAAiB,EAAET;AADM,SAArB,CAAN;AAEAI,QAAAA,KAAK,CAAC;AACJM,UAAAA,KAAK,EAAE,cADH;AAEJC,UAAAA,MAAM,EAAE;AAFJ,SAAD,CAAL,CAHC,CAOD;AACD,OARD,CAQC,OAAMC,GAAN,EAAU;AACTR,QAAAA,KAAK,CAAC;AACJM,UAAAA,KAAK,EAAE,uBADH;AAEJG,UAAAA,WAAW,EAAED,GAAG,CAACE,QAAJ,EAFT;AAGJH,UAAAA,MAAM,EAAE;AAHJ,SAAD,CAAL;AAKD;AACF,KAhBD,MAgBM;AACJ,UAAI;AACF,cAAMnB,SAAS,CAACuB,UAAV,CAAqB;AACzBP,UAAAA,WAAW,EAAEf,aADY;AAEzBgB,UAAAA,iBAAiB,EAAET,kBAFM;AAGzBJ,UAAAA,YAHyB;AAIzBE,UAAAA;AAJyB,SAArB,CAAN;AAMAM,QAAAA,KAAK,CAAC;AACJM,UAAAA,KAAK,EAAE,cADH;AAEJG,UAAAA,WAAW,EAAE,4DAFT;AAGJF,UAAAA,MAAM,EAAE;AAHJ,SAAD,CAAL,CAPE,CAYF;AACD,OAbD,CAaC,OAAMC,GAAN,EAAU;AACTR,QAAAA,KAAK,CAAC;AACJM,UAAAA,KAAK,EAAE,uBADH;AAEJG,UAAAA,WAAW,EAAED,GAAG,CAACE,QAAJ,EAFT;AAGJH,UAAAA,MAAM,EAAE;AAHJ,SAAD,CAAL;AAKD;AACF;AACF,GAvCD;;AAyCA,sBAAO;AAAA,4BACL,QAAC,QAAD;AAAU,qBAAY,gBAAtB;AAAuC,MAAA,OAAO,EAAET,QAAhD;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADK,eAIL,QAAC,SAAD;AAAA,6BACA,QAAC,KAAD;AAAO,QAAA,MAAM,EAAEb,MAAf;AAAuB,QAAA,OAAO,EAAEc,SAAhC;AAAA,gCACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,YAAD;AAAA,kCACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAM,YAAA,QAAQ,EAAGa,EAAD,IAAM;AAACA,cAAAA,EAAE,CAACC,cAAH;AAAqBZ,cAAAA,cAAc,CAAC,MAAD,CAAd;AAAuB,aAAnE;AAAA,oCACE,QAAC,SAAD;AAAW,cAAA,EAAE,EAAE,CAAf;AAAA,sCACE,QAAC,WAAD;AAAA,wCACE,QAAC,SAAD;AAAW,kBAAA,OAAO,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,QAAC,KAAD;AAAO,kBAAA,EAAE,EAAC,cAAV;AAAyB,kBAAA,WAAW,EAAC,eAArC;AAAqD,kBAAA,IAAI,EAAC,cAA1D;AAAyE,kBAAA,KAAK,EAAET,YAAhF;AAA8F,kBAAA,QAAQ,EAAGoB,EAAD,IAAMnB,eAAe,CAACmB,EAAE,CAACE,MAAH,CAAUC,KAAX;AAA7H;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAME,QAAC,WAAD;AAAa,gBAAA,EAAE,EAAE,CAAjB;AAAA,wCACE,QAAC,SAAD;AAAW,kBAAA,OAAO,EAAC,kBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,QAAC,QAAD;AAAU,kBAAA,EAAE,EAAC,kBAAb;AAAgC,kBAAA,IAAI,EAAC,kBAArC;AAAyD,kBAAA,SAAS,EAAErB,gBAApE;AAAsF,kBAAA,QAAQ,EAAGsB,CAAD,IAAKrB,mBAAmB,CAACqB,CAAC,CAACF,MAAF,CAASG,OAAV;AAAxH;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBANF,eAUE,QAAC,WAAD;AAAa,gBAAA,UAAU,MAAvB;AAAA,wCACE,QAAC,SAAD;AAAW,kBAAA,OAAO,EAAC,gBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,QAAC,KAAD;AAAO,iCAAY,gBAAnB;AAAoC,kBAAA,EAAE,EAAC,gBAAvC;AAAwD,kBAAA,WAAW,EAAC,UAApE;AAA+E,kBAAA,IAAI,EAAC,UAApF;AAA+F,kBAAA,IAAI,EAAC,UAApG;AAA+G,kBAAA,KAAK,EAAErB,kBAAtH;AAA0I,kBAAA,QAAQ,EAAGoB,CAAD,IAAKnB,qBAAqB,CAACmB,CAAC,CAACF,MAAF,CAASC,KAAV;AAA9K;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAiBE,QAAC,WAAD;AAAA,sCACE,QAAC,MAAD;AAAQ,+BAAY,cAApB;AAAmC,gBAAA,WAAW,EAAC,KAA/C;AAAqD,gBAAA,EAAE,EAAE,CAAzD;AAA4D,gBAAA,KAAK,EAAC,QAAlE;AAA2E,gBAAA,IAAI,EAAC,SAAhF;AAA0F,gBAAA,OAAO,EAAE,MAAId,cAAc,CAAC,QAAD,CAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,MAAD;AAAQ,+BAAY,cAApB;AAAmC,gBAAA,WAAW,EAAC,MAA/C;AAAsD,gBAAA,EAAE,EAAE,CAA1D;AAA6D,gBAAA,KAAK,EAAC,QAAnE;AAA4E,gBAAA,IAAI,EAAC,SAAjF;AAA2F,gBAAA,OAAO,EAAE,MAAIA,cAAc,CAAC,MAAD,CAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,eAOE,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAEF,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAJK;AAAA,kBAAP;AAyCD,CArGD;;GAAMf,I;UAC8BL,a,EAEuDI,gB,EAe3EH,Q;;;KAlBVI,I;AAuGN,eAAeA,IAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport Draggable from 'react-draggable';\n\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  useToast\n} from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\n// import useMaybeVideo from '../../hooks/useMaybeVideo';\n\nconst Chat: React.FunctionComponent = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n//   const video = useMaybeVideo()\n  const {apiClient, currentTownID, currentTownFriendlyName, currentTownIsPubliclyListed} = useCoveyAppState();\n  const [friendlyName, setFriendlyName] = useState<string>(currentTownFriendlyName);\n  const [isPubliclyListed, setIsPubliclyListed] = useState<boolean>(currentTownIsPubliclyListed);\n  const [roomUpdatePassword, setRoomUpdatePassword] = useState<string>('');\n\n\n\n  const openChat = useCallback(()=>{\n    onOpen();\n  }, [onOpen]);\n\n  const closeChat = useCallback(()=>{\n    onClose();\n  }, [onClose]);\n\n  const toast = useToast()\n  const processUpdates = async (action: string) =>{\n    if(action === 'delete'){\n      try{\n        await apiClient.deleteTown({coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword});\n        toast({\n          title: 'Town deleted',\n          status: 'success'\n        })\n        // closeSettings();\n      }catch(err){\n        toast({\n          title: 'Unable to delete town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    }else {\n      try {\n        await apiClient.updateTown({\n          coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword,\n          friendlyName,\n          isPubliclyListed\n        });\n        toast({\n          title: 'Town updated',\n          description: 'To see the updated town, please exit and re-join this town',\n          status: 'success'\n        })\n        // closeSettings();\n      }catch(err){\n        toast({\n          title: 'Unable to update town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    }\n  };\n\n  return <>\n    <MenuItem data-testid='openMenuButton' onClick={openChat}>\n      <Typography variant=\"body1\">Chat</Typography>\n    </MenuItem>\n    <Draggable>\n    <Modal isOpen={isOpen} onClose={closeChat}>\n      <ModalOverlay/>\n      <ModalContent>\n        <ModalHeader>Chat</ModalHeader>\n        <ModalCloseButton/>\n        <form onSubmit={(ev)=>{ev.preventDefault(); processUpdates('edit')}}>\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel htmlFor='friendlyName'>Friendly Name</FormLabel>\n              <Input id='friendlyName' placeholder=\"Friendly Name\" name=\"friendlyName\" value={friendlyName} onChange={(ev)=>setFriendlyName(ev.target.value)} />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel htmlFor='isPubliclyListed'>Publicly Listed</FormLabel>\n              <Checkbox id=\"isPubliclyListed\" name=\"isPubliclyListed\"  isChecked={isPubliclyListed} onChange={(e)=>setIsPubliclyListed(e.target.checked)} />\n            </FormControl>\n            <FormControl isRequired>\n              <FormLabel htmlFor=\"updatePassword\">Town Update Password</FormLabel>\n              <Input data-testid=\"updatePassword\" id=\"updatePassword\" placeholder=\"Password\" name=\"password\" type=\"password\" value={roomUpdatePassword} onChange={(e)=>setRoomUpdatePassword(e.target.value)} />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button data-testid='deletebutton' colorScheme=\"red\" mr={3} value=\"delete\" name='action1' onClick={()=>processUpdates('delete')}>\n              Delete\n            </Button>\n            <Button data-testid='updatebutton' colorScheme=\"blue\" mr={3} value=\"update\" name='action2' onClick={()=>processUpdates('edit')}>\n              Update\n            </Button>\n            <Button onClick={closeChat}>Close</Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n    </Draggable>\n  </>\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}