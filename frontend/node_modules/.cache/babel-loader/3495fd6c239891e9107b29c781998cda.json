{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Login/TownSettings.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { Button, Checkbox, FormControl, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure, useToast } from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nimport useMaybeVideo from '../../hooks/useMaybeVideo';\n\nconst TownSettings = () => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const video = useMaybeVideo();\n  const {\n    apiClient,\n    currentTownID,\n    currentTownFriendlyName,\n    currentTownIsPubliclyListed\n  } = useCoveyAppState();\n  const [friendlyName, setFriendlyName] = useState(currentTownFriendlyName);\n  const [isPubliclyListed, setIsPubliclyListed] = useState(currentTownIsPubliclyListed);\n  const [roomUpdatePassword, setRoomUpdatePassword] = useState('');\n  const openSettings = useCallback(() => {\n    onOpen();\n    video === null || video === void 0 ? void 0 : video.pauseGame();\n  }, [onOpen, video]);\n  const closeSettings = useCallback(() => {\n    onClose();\n    video === null || video === void 0 ? void 0 : video.unPauseGame();\n  }, [onClose, video]);\n  const toast = useToast();\n\n  const processUpdates = async action => {\n    if (action === 'delete') {\n      try {\n        console.log('here');\n        await apiClient.deleteTown({\n          coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword\n        });\n        toast({\n          title: 'Town deleted',\n          status: 'success'\n        });\n        closeSettings();\n      } catch (err) {\n        toast({\n          title: 'Unable to delete town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    } else {\n      try {\n        await apiClient.updateTown({\n          coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword,\n          friendlyName,\n          isPubliclyListed\n        });\n        toast({\n          title: 'Town updated',\n          description: 'To see the updated town, please exit and re-join this town',\n          status: 'success'\n        });\n        closeSettings();\n      } catch (err) {\n        toast({\n          title: 'Unable to update town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      \"data-testid\": \"openMenuButton\",\n      onClick: openSettings,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Town Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onClose: closeSettings,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: [\"Edit town \", currentTownFriendlyName, \" (\", currentTownID, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: ev => {\n            ev.preventDefault();\n            processUpdates('edit');\n          },\n          children: [/*#__PURE__*/_jsxDEV(ModalBody, {\n            pb: 6,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                htmlFor: \"friendlyName\",\n                children: \"Friendly Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"friendlyName\",\n                placeholder: \"Friendly Name\",\n                name: \"friendlyName\",\n                value: friendlyName,\n                onChange: ev => setFriendlyName(ev.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              mt: 4,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                htmlFor: \"isPubliclyListed\",\n                children: \"Publicly Listed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                id: \"isPubliclyListed\",\n                name: \"isPubliclyListed\",\n                isChecked: isPubliclyListed,\n                onChange: e => setIsPubliclyListed(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                htmlFor: \"updatePassword\",\n                children: \"Town Update Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                \"data-testid\": \"updatePassword\",\n                id: \"updatePassword\",\n                placeholder: \"Password\",\n                name: \"password\",\n                type: \"password\",\n                value: roomUpdatePassword,\n                onChange: e => setRoomUpdatePassword(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              \"data-testid\": \"deletebutton\",\n              colorScheme: \"red\",\n              mr: 3,\n              value: \"delete\",\n              name: \"action1\",\n              onClick: () => processUpdates('delete'),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              \"data-testid\": \"updatebutton\",\n              colorScheme: \"blue\",\n              mr: 3,\n              value: \"update\",\n              name: \"action2\",\n              onClick: () => processUpdates('edit'),\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: closeSettings,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TownSettings, \"820FoJtgi0ZwAygsldMZNXaGgTg=\", false, function () {\n  return [useDisclosure, useMaybeVideo, useCoveyAppState, useToast];\n});\n\n_c = TownSettings;\nexport default TownSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"TownSettings\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Login/TownSettings.tsx"],"names":["React","useCallback","useState","Button","Checkbox","FormControl","FormLabel","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useDisclosure","useToast","MenuItem","Typography","useCoveyAppState","useMaybeVideo","TownSettings","isOpen","onOpen","onClose","video","apiClient","currentTownID","currentTownFriendlyName","currentTownIsPubliclyListed","friendlyName","setFriendlyName","isPubliclyListed","setIsPubliclyListed","roomUpdatePassword","setRoomUpdatePassword","openSettings","pauseGame","closeSettings","unPauseGame","toast","processUpdates","action","console","log","deleteTown","coveyTownID","coveyTownPassword","title","status","err","description","toString","updateTown","ev","preventDefault","target","value","e","checked"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  useToast\n} from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nimport useMaybeVideo from '../../hooks/useMaybeVideo';\n\nconst TownSettings: React.FunctionComponent = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n  const video = useMaybeVideo()\n  const {apiClient, currentTownID, currentTownFriendlyName, currentTownIsPubliclyListed} = useCoveyAppState();\n  const [friendlyName, setFriendlyName] = useState<string>(currentTownFriendlyName);\n  const [isPubliclyListed, setIsPubliclyListed] = useState<boolean>(currentTownIsPubliclyListed);\n  const [roomUpdatePassword, setRoomUpdatePassword] = useState<string>('');\n\n  const openSettings = useCallback(()=>{\n    onOpen();\n    video?.pauseGame();\n  }, [onOpen, video]);\n\n  const closeSettings = useCallback(()=>{\n    onClose();\n    video?.unPauseGame();\n  }, [onClose, video]);\n\n  const toast = useToast()\n  const processUpdates = async (action: string) =>{\n    if(action === 'delete'){\n      try{\n        console.log('here');\n        await apiClient.deleteTown({coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword});\n        toast({\n          title: 'Town deleted',\n          status: 'success'\n        })\n        closeSettings();\n      }catch(err){\n        toast({\n          title: 'Unable to delete town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    }else {\n      try {\n        await apiClient.updateTown({\n          coveyTownID: currentTownID,\n          coveyTownPassword: roomUpdatePassword,\n          friendlyName,\n          isPubliclyListed\n        });\n        toast({\n          title: 'Town updated',\n          description: 'To see the updated town, please exit and re-join this town',\n          status: 'success'\n        })\n        closeSettings();\n      }catch(err){\n        toast({\n          title: 'Unable to update town',\n          description: err.toString(),\n          status: 'error'\n        });\n      }\n    }\n  };\n\n  return <>\n    <MenuItem data-testid='openMenuButton' onClick={openSettings}>\n      <Typography variant=\"body1\">Town Settings</Typography>\n    </MenuItem>\n    <Modal isOpen={isOpen} onClose={closeSettings}>\n      <ModalOverlay/>\n      <ModalContent>\n        <ModalHeader>Edit town {currentTownFriendlyName} ({currentTownID})</ModalHeader>\n        <ModalCloseButton/>\n        <form onSubmit={(ev)=>{ev.preventDefault(); processUpdates('edit')}}>\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel htmlFor='friendlyName'>Friendly Name</FormLabel>\n              <Input id='friendlyName' placeholder=\"Friendly Name\" name=\"friendlyName\" value={friendlyName} onChange={(ev)=>setFriendlyName(ev.target.value)} />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel htmlFor='isPubliclyListed'>Publicly Listed</FormLabel>\n              <Checkbox id=\"isPubliclyListed\" name=\"isPubliclyListed\"  isChecked={isPubliclyListed} onChange={(e)=>setIsPubliclyListed(e.target.checked)} />\n            </FormControl>\n            <FormControl isRequired>\n              <FormLabel htmlFor=\"updatePassword\">Town Update Password</FormLabel>\n              <Input data-testid=\"updatePassword\" id=\"updatePassword\" placeholder=\"Password\" name=\"password\" type=\"password\" value={roomUpdatePassword} onChange={(e)=>setRoomUpdatePassword(e.target.value)} />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button data-testid='deletebutton' colorScheme=\"red\" mr={3} value=\"delete\" name='action1' onClick={()=>processUpdates('delete')}>\n              Delete\n            </Button>\n            <Button data-testid='updatebutton' colorScheme=\"blue\" mr={3} value=\"update\" name='action2' onClick={()=>processUpdates('edit')}>\n              Update\n            </Button>\n            <Button onClick={closeSettings}>Cancel</Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  </>\n}\n\nexport default TownSettings;\n"]},"metadata":{},"sourceType":"module"}