{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport { isMobile } from '../../../utils';\nimport useLocalVideoToggle from '../../../hooks/useLocalVideoToggle/useLocalVideoToggle';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\n/*\n  This component adds a visibilitychange handler to the document when\n  the user is using a mobile device. When the handler detects that\n  the browser has been backgrounded, it unpublishes the users local\n  video track. The browser cannot send video to the room when it has\n  been backgrounded, so unpublishing the track stops video capture\n  on the device, and triggers a UI update for all other participants\n  to show that this user's video track has been turned off.\n*/\n\nexport default function AttachVisibilityHandler() {\n  _s();\n\n  const {\n    room\n  } = useVideoContext();\n  const {\n    isEnabled: isVideoEnabled,\n    toggleVideoEnabled\n  } = useLocalVideoToggle();\n  const shouldRepublishVideoOnForeground = useRef(false);\n  useEffect(() => {\n    if (isMobile) {\n      const handleVisibilityChange = () => {\n        // We don't need to unpublish the local video track if it has already been unpublished\n        if (document.visibilityState === 'hidden' && isVideoEnabled) {\n          shouldRepublishVideoOnForeground.current = true;\n          toggleVideoEnabled(); // Don't publish the local video track if it wasn't published before the app was backgrounded\n        } else if (shouldRepublishVideoOnForeground.current) {\n          shouldRepublishVideoOnForeground.current = false;\n          toggleVideoEnabled();\n        }\n      };\n\n      document.addEventListener('visibilitychange', handleVisibilityChange);\n      return () => {\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n      };\n    }\n\n    return () => {};\n  }, [isVideoEnabled, room, toggleVideoEnabled]);\n  return null;\n}\n\n_s(AttachVisibilityHandler, \"b+pw0AspZi5D5ANCtOhtvIZ9NOk=\", false, function () {\n  return [useVideoContext, useLocalVideoToggle];\n});\n\n_c = AttachVisibilityHandler;\n\nvar _c;\n\n$RefreshReg$(_c, \"AttachVisibilityHandler\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/components/VideoProvider/AttachVisibilityHandler/AttachVisibilityHandler.tsx"],"names":["useEffect","useRef","isMobile","useLocalVideoToggle","useVideoContext","AttachVisibilityHandler","room","isEnabled","isVideoEnabled","toggleVideoEnabled","shouldRepublishVideoOnForeground","handleVisibilityChange","document","visibilityState","current","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,mBAAP,MAAgC,wDAAhC;AACA,OAAOC,eAAP,MAA4B,gDAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,uBAAT,GAAmC;AAAA;;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAWF,eAAe,EAAhC;AACA,QAAM;AAAEG,IAAAA,SAAS,EAAEC,cAAb;AAA6BC,IAAAA;AAA7B,MAAoDN,mBAAmB,EAA7E;AACA,QAAMO,gCAAgC,GAAGT,MAAM,CAAC,KAAD,CAA/C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,QAAJ,EAAc;AACZ,YAAMS,sBAAsB,GAAG,MAAM;AACnC;AACA,YAAIC,QAAQ,CAACC,eAAT,KAA6B,QAA7B,IAAyCL,cAA7C,EAA6D;AAC3DE,UAAAA,gCAAgC,CAACI,OAAjC,GAA2C,IAA3C;AACAL,UAAAA,kBAAkB,GAFyC,CAI3D;AACD,SALD,MAKO,IAAIC,gCAAgC,CAACI,OAArC,EAA8C;AACnDJ,UAAAA,gCAAgC,CAACI,OAAjC,GAA2C,KAA3C;AACAL,UAAAA,kBAAkB;AACnB;AACF,OAXD;;AAaAG,MAAAA,QAAQ,CAACG,gBAAT,CAA0B,kBAA1B,EAA8CJ,sBAA9C;AACA,aAAO,MAAM;AACXC,QAAAA,QAAQ,CAACI,mBAAT,CAA6B,kBAA7B,EAAiDL,sBAAjD;AACD,OAFD;AAGD;;AACD,WAAO,MAAM,CAAE,CAAf;AACD,GArBQ,EAqBN,CAACH,cAAD,EAAiBF,IAAjB,EAAuBG,kBAAvB,CArBM,CAAT;AAuBA,SAAO,IAAP;AACD;;GA7BuBJ,uB;UACLD,e,EACyCD,mB;;;KAFpCE,uB","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { isMobile } from '../../../utils';\nimport useLocalVideoToggle from '../../../hooks/useLocalVideoToggle/useLocalVideoToggle';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\n\n/*\n  This component adds a visibilitychange handler to the document when\n  the user is using a mobile device. When the handler detects that\n  the browser has been backgrounded, it unpublishes the users local\n  video track. The browser cannot send video to the room when it has\n  been backgrounded, so unpublishing the track stops video capture\n  on the device, and triggers a UI update for all other participants\n  to show that this user's video track has been turned off.\n*/\n\nexport default function AttachVisibilityHandler() {\n  const { room } = useVideoContext();\n  const { isEnabled: isVideoEnabled, toggleVideoEnabled } = useLocalVideoToggle();\n  const shouldRepublishVideoOnForeground = useRef(false);\n\n  useEffect(() => {\n    if (isMobile) {\n      const handleVisibilityChange = () => {\n        // We don't need to unpublish the local video track if it has already been unpublished\n        if (document.visibilityState === 'hidden' && isVideoEnabled) {\n          shouldRepublishVideoOnForeground.current = true;\n          toggleVideoEnabled();\n\n          // Don't publish the local video track if it wasn't published before the app was backgrounded\n        } else if (shouldRepublishVideoOnForeground.current) {\n          shouldRepublishVideoOnForeground.current = false;\n          toggleVideoEnabled();\n        }\n      };\n\n      document.addEventListener('visibilitychange', handleVisibilityChange);\n      return () => {\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n      };\n    }\n    return () => {};\n  }, [isVideoEnabled, room, toggleVideoEnabled]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}