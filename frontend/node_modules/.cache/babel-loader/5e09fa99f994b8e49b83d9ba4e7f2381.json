{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Flex, FormControl, Input, Drawer, DrawerBody, DrawerFooter, DrawerHeader, DrawerContent, DrawerCloseButton, Select, useDisclosure } from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nimport './Chat.css';\n\nconst Chat = () => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    socket,\n    messageHistory,\n    players,\n    userName,\n    unseenMessages\n  } = useCoveyAppState();\n  const [message, setMessage] = useState('');\n  const [currentPlayers, setCurrentPlayers] = useState([]);\n  const [receiver, setReceiver] = useState('');\n  const openChat = useCallback(() => {\n    onOpen();\n    socket === null || socket === void 0 ? void 0 : socket.emit('looking at messages');\n  }, [onOpen, socket]);\n  const closeChat = useCallback(() => {\n    onClose();\n    socket === null || socket === void 0 ? void 0 : socket.emit('looking at messages');\n  }, [onClose, socket]);\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a, b) => a.userName < b.userName ? -1 : 1));\n  }, [players]);\n  useEffect(() => {\n    updatePlayers(); // updateUnseen();\n\n    const timer = setInterval(updatePlayers, 2000); // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer); // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n\n  const processUpdates = async () => {\n    if (receiver === 'Everyone') {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPublicMessage', message, userName);\n    } else {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPrivateMessage', message, receiver, userName);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      \"data-testid\": \"openMenuButton\",\n      onClick: openChat,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n      isOpen: isOpen,\n      onClose: closeChat,\n      size: \"sm\",\n      blockScrollOnMount: false,\n      children: /*#__PURE__*/_jsxDEV(DrawerContent, {\n        children: [/*#__PURE__*/_jsxDEV(DrawerHeader, {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DrawerCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DrawerBody, {\n          pb: 6,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: messageHistory === null || messageHistory === void 0 ? void 0 : messageHistory.messageHistory.map(msg => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" \", msg.from, \" to \", msg.to, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 55\n              }, this), \" \", msg.message, \"  \"]\n            }, msg.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DrawerFooter, {\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: [\"To:\", /*#__PURE__*/_jsxDEV(Select, {\n                className: \"select-users\",\n                id: \"friendlyName\",\n                placeholder: \"Everyone\",\n                name: \"receiver\",\n                mr: 4,\n                value: receiver,\n                onChange: ev => setReceiver(ev.target.value),\n                children: currentPlayers === null || currentPlayers === void 0 ? void 0 : currentPlayers.map(player => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: [\" To: \", player.userName]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 15\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 14\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DrawerFooter, {\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                id: \"message\",\n                placeholder: \"Message...\",\n                name: \"message\",\n                value: message,\n                onChange: ev => setMessage(ev.target.value),\n                mr: 4\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              \"data-testid\": \"sendbutton\",\n              colorScheme: \"blue\",\n              mr: 3,\n              value: \"send\",\n              name: \"action1\",\n              onClick: () => processUpdates(),\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Chat, \"kyEFKBHsYjLM86XnSR+BIMni6ss=\", false, function () {\n  return [useDisclosure, useCoveyAppState];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx"],"names":["React","useCallback","useEffect","useState","Button","Flex","FormControl","Input","Drawer","DrawerBody","DrawerFooter","DrawerHeader","DrawerContent","DrawerCloseButton","Select","useDisclosure","MenuItem","Typography","useCoveyAppState","Chat","isOpen","onOpen","onClose","socket","messageHistory","players","userName","unseenMessages","message","setMessage","currentPlayers","setCurrentPlayers","receiver","setReceiver","openChat","emit","closeChat","updatePlayers","sort","a","b","timer","setInterval","clearInterval","processUpdates","map","msg","from","to","id","ev","target","value","player"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  Button,\n  Flex,\n  FormControl,\n  Input,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerContent,\n  DrawerCloseButton,\n  Select,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nimport Player from '../../classes/Player';\nimport './Chat.css';\n\nconst Chat: React.FunctionComponent = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n  const {socket, messageHistory, players, userName, unseenMessages} = useCoveyAppState();\n  const [message, setMessage] = useState<string>('');\n  const [currentPlayers, setCurrentPlayers] = useState<Player[]>([]);\n  const [receiver, setReceiver] = useState<string>('');\n\n  const openChat = useCallback(()=>{\n    onOpen();\n    socket?.emit('looking at messages');\n  }, [onOpen, socket]);\n\n  const closeChat = useCallback(()=>{\n    onClose();\n    socket?.emit('looking at messages');\n  }, [onClose, socket]);\n\n\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a,b) => a.userName < b.userName ? -1:1));\n  }, [players]);\n\n\n  useEffect(() => {\n    updatePlayers();\n    // updateUnseen();\n    const timer = setInterval(updatePlayers, 2000);\n    // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer);\n      // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n  \n  const processUpdates = async () =>{\n    if (receiver === 'Everyone') {\n      socket?.emit('sendPublicMessage', message, userName);\n    } else {\n      socket?.emit('sendPrivateMessage', message, receiver, userName)\n    } \n  };\n\n  return <>\n    <MenuItem data-testid='openMenuButton' onClick={openChat}>\n      <Typography variant=\"body1\">Chat</Typography>\n    </MenuItem>\n\n    <Drawer isOpen={isOpen} onClose={closeChat} size=\"sm\" blockScrollOnMount={false}>\n      \n      <DrawerContent>\n        <DrawerHeader>Chat</DrawerHeader>\n        <DrawerCloseButton/>\n          <DrawerBody pb={6}>\n            {/* <div className=\"users\">Users:</div>\n            {currentPlayers?.map((player) => ( \n              <p key={player.id}> {player.userName} </p>))}   */}\n           {/* <div className=\"messages\">Messages:</div>  */}\n            <div>\n              \n            {messageHistory?.messageHistory.map((msg) => ( \n              <p key={msg.id}> {msg.from} to {msg.to} <br /> {msg.message}  </p>\n            ))} \n            </div>\n          </DrawerBody>\n          <DrawerFooter>\n            <Flex>\n          <FormControl>\n            To:\n             <Select className=\"select-users\" id='friendlyName' placeholder=\"Everyone\" name=\"receiver\" mr={4} value={receiver} onChange={(ev)=>setReceiver(ev.target.value)}>\n              {currentPlayers?.map((player) => ( \n              <option key={player.id}> To: {player.userName}  \n              </option>))}\n              </Select>\n            </FormControl>\n            </Flex>\n          </DrawerFooter>\n          <DrawerFooter>\n            <Flex>\n            <FormControl>\n              <Input id='message' placeholder=\"Message...\" name=\"message\" value={message} onChange={(ev)=>setMessage(ev.target.value)} mr={4}/>\n            </FormControl>\n            <Button data-testid='sendbutton' colorScheme=\"blue\" mr={3} value=\"send\" name='action1' onClick={()=>processUpdates()}>\n              Send\n            </Button>\n            </Flex>\n          </DrawerFooter>\n      </DrawerContent>\n      \n    </Drawer>\n  </>\n}\n\nexport default Chat;\n\n"]},"metadata":{},"sourceType":"module"}