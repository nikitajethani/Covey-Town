{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport EventEmitter from 'events';\nimport Video from 'twilio-video';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { isMobile } from '../../../utils';\n// @ts-ignore\nwindow.TwilioVideo = Video;\nexport default function useRoom(localAudioTrack, localVideoTrack, onError, options) {\n  _s();\n\n  // @ts-ignore\n  const [room, setRoom] = useState(new EventEmitter());\n  const [isConnecting, setIsConnecting] = useState(false);\n  const optionsRef = useRef(options);\n  useEffect(() => {\n    // This allows the connect function to always access the most recent version of the options object. This allows us to\n    // reliably use the connect function at any time.\n    optionsRef.current = options;\n  }, [options]);\n  const connect = useCallback(token => {\n    setIsConnecting(true);\n    const localTracks = [localAudioTrack, localVideoTrack].filter(x => x !== undefined);\n    return Video.connect(token, { ...optionsRef.current,\n      tracks: localTracks\n    }).then(newRoom => {\n      setRoom(newRoom);\n\n      const disconnect = () => newRoom.disconnect(); // This app can add up to 13 'participantDisconnected' listeners to the room object, which can trigger\n      // a warning from the EventEmitter object. Here we increase the max listeners to suppress the warning.\n\n\n      newRoom.setMaxListeners(15);\n      newRoom.once('disconnected', () => {\n        // Reset the room only after all other `disconnected` listeners have been called.\n        // @ts-ignore\n        setTimeout(() => setRoom(new EventEmitter()));\n        window.removeEventListener('beforeunload', disconnect);\n\n        if (isMobile) {\n          window.removeEventListener('pagehide', disconnect);\n        }\n      }); // @ts-ignore\n\n      window.twilioRoom = newRoom;\n      newRoom.localParticipant.videoTracks.forEach(publication => // All video tracks are published with 'low' priority because the video track\n      // that is displayed in the 'MainParticipant' component will have it's priority\n      // set to 'high' via track.setPriority()\n      publication.setPriority('low'));\n      setIsConnecting(false); // Add a listener to disconnect from the room when a user closes their browser\n\n      window.addEventListener('beforeunload', disconnect);\n\n      if (isMobile) {\n        // Add a listener to disconnect from the room when a mobile user closes their browser\n        window.addEventListener('pagehide', disconnect);\n      }\n    }, error => {\n      onError(error);\n      setIsConnecting(false);\n    });\n  }, [localAudioTrack, localVideoTrack, onError]);\n  return {\n    room,\n    isConnecting,\n    connect\n  };\n}\n\n_s(useRoom, \"pPkuJ4l5Z2RHuym7kOkN5WrkLnc=\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/components/VideoProvider/useRoom/useRoom.tsx"],"names":["EventEmitter","Video","useCallback","useEffect","useRef","useState","isMobile","window","TwilioVideo","useRoom","localAudioTrack","localVideoTrack","onError","options","room","setRoom","isConnecting","setIsConnecting","optionsRef","current","connect","token","localTracks","filter","x","undefined","tracks","then","newRoom","disconnect","setMaxListeners","once","setTimeout","removeEventListener","twilioRoom","localParticipant","videoTracks","forEach","publication","setPriority","addEventListener","error"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,QAAzB;AACA,OAAOC,KAAP,MAEO,cAFP;AAGA,SACEC,WADF,EACeC,SADf,EAC0BC,MAD1B,EACkCC,QADlC,QAEO,OAFP;AAGA,SAASC,QAAT,QAAyB,gBAAzB;AAGA;AACAC,MAAM,CAACC,WAAP,GAAqBP,KAArB;AAEA,eAAe,SAASQ,OAAT,CACbC,eADa,EAEbC,eAFa,EAGbC,OAHa,EAIbC,OAJa,EAKb;AAAA;;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAO,IAAIL,YAAJ,EAAP,CAAhC;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMa,UAAU,GAAGd,MAAM,CAACS,OAAD,CAAzB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAe,IAAAA,UAAU,CAACC,OAAX,GAAqBN,OAArB;AACD,GAJQ,EAIN,CAACA,OAAD,CAJM,CAAT;AAMA,QAAMO,OAAO,GAAGlB,WAAW,CACxBmB,KAAD,IAAW;AACTJ,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,UAAMK,WAAW,GAAG,CAACZ,eAAD,EAAkBC,eAAlB,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAC,KAAKC,SAAvD,CAApB;AACA,WAAOxB,KAAK,CAACmB,OAAN,CAAcC,KAAd,EAAqB,EAAE,GAAGH,UAAU,CAACC,OAAhB;AAAyBO,MAAAA,MAAM,EAAEJ;AAAjC,KAArB,EAAqEK,IAArE,CACJC,OAAD,IAAa;AACXb,MAAAA,OAAO,CAACa,OAAD,CAAP;;AACA,YAAMC,UAAU,GAAG,MAAMD,OAAO,CAACC,UAAR,EAAzB,CAFW,CAIX;AACA;;;AACAD,MAAAA,OAAO,CAACE,eAAR,CAAwB,EAAxB;AAEAF,MAAAA,OAAO,CAACG,IAAR,CAAa,cAAb,EAA6B,MAAM;AACjC;AACA;AACAC,QAAAA,UAAU,CAAC,MAAMjB,OAAO,CAAC,IAAIf,YAAJ,EAAD,CAAd,CAAV;AACAO,QAAAA,MAAM,CAAC0B,mBAAP,CAA2B,cAA3B,EAA2CJ,UAA3C;;AAEA,YAAIvB,QAAJ,EAAc;AACZC,UAAAA,MAAM,CAAC0B,mBAAP,CAA2B,UAA3B,EAAuCJ,UAAvC;AACD;AACF,OATD,EARW,CAmBX;;AACAtB,MAAAA,MAAM,CAAC2B,UAAP,GAAoBN,OAApB;AAEAA,MAAAA,OAAO,CAACO,gBAAR,CAAyBC,WAAzB,CAAqCC,OAArC,CAA8CC,WAAD,IAC7C;AACA;AACA;AACEA,MAAAA,WAAW,CAACC,WAAZ,CAAwB,KAAxB,CAJF;AAMAtB,MAAAA,eAAe,CAAC,KAAD,CAAf,CA5BW,CA8BX;;AACAV,MAAAA,MAAM,CAACiC,gBAAP,CAAwB,cAAxB,EAAwCX,UAAxC;;AAEA,UAAIvB,QAAJ,EAAc;AACZ;AACAC,QAAAA,MAAM,CAACiC,gBAAP,CAAwB,UAAxB,EAAoCX,UAApC;AACD;AACF,KAtCI,EAuCJY,KAAD,IAAW;AACT7B,MAAAA,OAAO,CAAC6B,KAAD,CAAP;AACAxB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KA1CI,CAAP;AA4CD,GAhDwB,EAiDzB,CAACP,eAAD,EAAkBC,eAAlB,EAAmCC,OAAnC,CAjDyB,CAA3B;AAoDA,SAAO;AAAEE,IAAAA,IAAF;AAAQE,IAAAA,YAAR;AAAsBI,IAAAA;AAAtB,GAAP;AACD;;GAtEuBX,O","sourcesContent":["import EventEmitter from 'events';\nimport Video, {\n  ConnectOptions, LocalAudioTrack, LocalTrack, LocalVideoTrack, Room,\n} from 'twilio-video';\nimport {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport { isMobile } from '../../../utils';\nimport { Callback } from '../../../types';\n\n// @ts-ignore\nwindow.TwilioVideo = Video;\n\nexport default function useRoom(\n  localAudioTrack: LocalAudioTrack | undefined,\n  localVideoTrack: LocalVideoTrack | undefined,\n  onError: Callback,\n  options?: ConnectOptions,\n) {\n  // @ts-ignore\n  const [room, setRoom] = useState<Room>(new EventEmitter() as Room);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const optionsRef = useRef(options);\n\n  useEffect(() => {\n    // This allows the connect function to always access the most recent version of the options object. This allows us to\n    // reliably use the connect function at any time.\n    optionsRef.current = options;\n  }, [options]);\n\n  const connect = useCallback(\n    (token) => {\n      setIsConnecting(true);\n      const localTracks = [localAudioTrack, localVideoTrack].filter((x) => x !== undefined) as LocalTrack[];\n      return Video.connect(token, { ...optionsRef.current, tracks: localTracks }).then(\n        (newRoom) => {\n          setRoom(newRoom);\n          const disconnect = () => newRoom.disconnect();\n\n          // This app can add up to 13 'participantDisconnected' listeners to the room object, which can trigger\n          // a warning from the EventEmitter object. Here we increase the max listeners to suppress the warning.\n          newRoom.setMaxListeners(15);\n\n          newRoom.once('disconnected', () => {\n            // Reset the room only after all other `disconnected` listeners have been called.\n            // @ts-ignore\n            setTimeout(() => setRoom(new EventEmitter() as Room));\n            window.removeEventListener('beforeunload', disconnect);\n\n            if (isMobile) {\n              window.removeEventListener('pagehide', disconnect);\n            }\n          });\n\n          // @ts-ignore\n          window.twilioRoom = newRoom;\n\n          newRoom.localParticipant.videoTracks.forEach((publication) =>\n          // All video tracks are published with 'low' priority because the video track\n          // that is displayed in the 'MainParticipant' component will have it's priority\n          // set to 'high' via track.setPriority()\n            publication.setPriority('low'));\n\n          setIsConnecting(false);\n\n          // Add a listener to disconnect from the room when a user closes their browser\n          window.addEventListener('beforeunload', disconnect);\n\n          if (isMobile) {\n            // Add a listener to disconnect from the room when a mobile user closes their browser\n            window.addEventListener('pagehide', disconnect);\n          }\n        },\n        (error) => {\n          onError(error);\n          setIsConnecting(false);\n        },\n      );\n    },\n    [localAudioTrack, localVideoTrack, onError],\n  );\n\n  return { room, isConnecting, connect };\n}\n"]},"metadata":{},"sourceType":"module"}