{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Login/TownSelection.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport assert from \"assert\";\nimport { Box, Button, Checkbox, Flex, FormControl, FormLabel, Heading, Input, Stack, Table, TableCaption, Tbody, Td, Th, Thead, Tr, useToast } from '@chakra-ui/react';\nimport useVideoContext from '../VideoCall/VideoFrontend/hooks/useVideoContext/useVideoContext';\nimport Video from '../../classes/Video/Video';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nexport default function TownSelection({\n  doLogin\n}) {\n  _s();\n\n  var _Video$instance;\n\n  const [userName, setUserName] = useState(((_Video$instance = Video.instance()) === null || _Video$instance === void 0 ? void 0 : _Video$instance.userName) || '');\n  const [newTownName, setNewTownName] = useState('');\n  const [newTownIsPublic, setNewTownIsPublic] = useState(true);\n  const [townIDToJoin, setTownIDToJoin] = useState('');\n  const [currentPublicTowns, setCurrentPublicTowns] = useState();\n  const {\n    connect\n  } = useVideoContext();\n  const {\n    apiClient\n  } = useCoveyAppState();\n  const toast = useToast();\n  const updateTownListings = useCallback(() => {\n    // console.log(apiClient);\n    apiClient.listTowns().then(towns => {\n      setCurrentPublicTowns(towns.towns.sort((a, b) => b.currentOccupancy - a.currentOccupancy));\n    });\n  }, [setCurrentPublicTowns, apiClient]);\n  useEffect(() => {\n    updateTownListings();\n    const timer = setInterval(updateTownListings, 2000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [updateTownListings]);\n  const handleJoin = useCallback(async coveyRoomID => {\n    // // const response = await apiClient.townInfo({coveyTownID: coveyRoomID});\n    // console.log(response.currentPlayers);\n    try {\n      if (!userName || userName.length === 0) {\n        toast({\n          title: 'Unable to join town',\n          description: 'Please select a username',\n          status: 'error'\n        });\n        return;\n      } // if (response.currentPlayers.includes(userName)) {\n      //   toast({\n      //     title: 'Unable to join town',\n      //     description: 'Your username is taken - please select a different username',\n      //     status: 'error',\n      //   });\n      //   return;\n      // }\n\n\n      if (!coveyRoomID || coveyRoomID.length === 0) {\n        toast({\n          title: 'Unable to join town',\n          description: 'Please enter a town ID',\n          status: 'error'\n        });\n        return;\n      }\n\n      const initData = await Video.setup(userName, coveyRoomID);\n      const loggedIn = await doLogin(initData);\n\n      if (loggedIn) {\n        assert(initData.providerVideoToken);\n        await connect(initData.providerVideoToken);\n      }\n    } catch (err) {\n      toast({\n        title: 'Unable to connect to Towns Service',\n        description: err.toString(),\n        status: 'error'\n      });\n    }\n  }, [apiClient, doLogin, userName, connect, toast]);\n\n  const handleCreate = async () => {\n    if (!userName || userName.length === 0) {\n      toast({\n        title: 'Unable to create town',\n        description: 'Please select a username before creating a town',\n        status: 'error'\n      });\n      return;\n    }\n\n    if (!newTownName || newTownName.length === 0) {\n      toast({\n        title: 'Unable to create town',\n        description: 'Please enter a town name',\n        status: 'error'\n      });\n      return;\n    }\n\n    try {\n      const newTownInfo = await apiClient.createTown({\n        friendlyName: newTownName,\n        isPubliclyListed: newTownIsPublic\n      });\n\n      let privateMessage = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n      if (!newTownIsPublic) {\n        privateMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"This town will NOT be publicly listed. To re-enter it, you will need to use this ID: \", newTownInfo.coveyTownID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this);\n      }\n\n      toast({\n        title: `Town ${newTownName} is ready to go!`,\n        description: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [privateMessage, \"Please record these values in case you need to change the room:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 16\n          }, this), \"Town ID: \", newTownInfo.coveyTownID, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 55\n          }, this), \"Town Editing Password: \", newTownInfo.coveyTownPassword]\n        }, void 0, true),\n        status: 'success',\n        isClosable: true,\n        duration: null\n      });\n      await handleJoin(newTownInfo.coveyTownID);\n    } catch (err) {\n      toast({\n        title: 'Unable to connect to Towns Service',\n        description: err.toString(),\n        status: 'error'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          p: \"4\",\n          borderWidth: \"1px\",\n          borderRadius: \"lg\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            as: \"h2\",\n            size: \"lg\",\n            children: \"Select a username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              htmlFor: \"name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              autoFocus: true,\n              name: \"name\",\n              placeholder: \"Your name\",\n              value: userName,\n              onChange: event => setUserName(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          borderWidth: \"1px\",\n          borderRadius: \"lg\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            p: \"4\",\n            as: \"h2\",\n            size: \"lg\",\n            children: \"Create a New Town\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            p: \"4\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              flex: \"1\",\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"townName\",\n                  children: \"New Town Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"townName\",\n                  placeholder: \"New Town Name\",\n                  value: newTownName,\n                  onChange: event => setNewTownName(event.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"isPublic\",\n                  children: \"Publicly Listed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                  id: \"isPublic\",\n                  name: \"isPublic\",\n                  isChecked: newTownIsPublic,\n                  onChange: e => {\n                    setNewTownIsPublic(e.target.checked);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                \"data-testid\": \"newTownButton\",\n                onClick: handleCreate,\n                children: \"Create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Heading, {\n          p: \"4\",\n          as: \"h2\",\n          size: \"lg\",\n          children: \"-or-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          borderWidth: \"1px\",\n          borderRadius: \"lg\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            p: \"4\",\n            as: \"h2\",\n            size: \"lg\",\n            children: \"Join an Existing Town\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            borderWidth: \"1px\",\n            borderRadius: \"lg\",\n            children: /*#__PURE__*/_jsxDEV(Flex, {\n              p: \"4\",\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"townIDToJoin\",\n                  children: \"Town ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"townIDToJoin\",\n                  placeholder: \"ID of town to join, or select from list\",\n                  value: townIDToJoin,\n                  onChange: event => setTownIDToJoin(event.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                \"data-testid\": \"joinTownByIDButton\",\n                onClick: () => handleJoin(townIDToJoin),\n                children: \"Connect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            p: \"4\",\n            as: \"h4\",\n            size: \"md\",\n            children: \"Select a public town to join\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            maxH: \"500px\",\n            overflowY: \"scroll\",\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              children: [/*#__PURE__*/_jsxDEV(TableCaption, {\n                placement: \"bottom\",\n                children: \"Publicly Listed Towns\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Thead, {\n                children: /*#__PURE__*/_jsxDEV(Tr, {\n                  children: [/*#__PURE__*/_jsxDEV(Th, {\n                    children: \"Room Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 28\n                  }, this), /*#__PURE__*/_jsxDEV(Th, {\n                    children: \"Room ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 46\n                  }, this), /*#__PURE__*/_jsxDEV(Th, {\n                    children: \"Activity\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 62\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 24\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n                children: currentPublicTowns === null || currentPublicTowns === void 0 ? void 0 : currentPublicTowns.map(town => /*#__PURE__*/_jsxDEV(Tr, {\n                  children: [/*#__PURE__*/_jsxDEV(Td, {\n                    role: \"cell\",\n                    children: town.friendlyName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 48\n                  }, this), /*#__PURE__*/_jsxDEV(Td, {\n                    role: \"cell\",\n                    children: town.coveyTownID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 88\n                  }, this), /*#__PURE__*/_jsxDEV(Td, {\n                    role: \"cell\",\n                    children: [town.currentOccupancy, \"/\", town.maximumOccupancy, /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => handleJoin(town.coveyTownID),\n                      disabled: town.currentOccupancy >= town.maximumOccupancy,\n                      children: \"Connect\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 216,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 23\n                  }, this)]\n                }, town.coveyTownID, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(TownSelection, \"3C/6fMmzSQZDX1Ktk2yu9SmowMU=\", false, function () {\n  return [useVideoContext, useCoveyAppState, useToast];\n});\n\n_c = TownSelection;\n\nvar _c;\n\n$RefreshReg$(_c, \"TownSelection\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Login/TownSelection.tsx"],"names":["React","useCallback","useEffect","useState","assert","Box","Button","Checkbox","Flex","FormControl","FormLabel","Heading","Input","Stack","Table","TableCaption","Tbody","Td","Th","Thead","Tr","useToast","useVideoContext","Video","useCoveyAppState","TownSelection","doLogin","userName","setUserName","instance","newTownName","setNewTownName","newTownIsPublic","setNewTownIsPublic","townIDToJoin","setTownIDToJoin","currentPublicTowns","setCurrentPublicTowns","connect","apiClient","toast","updateTownListings","listTowns","then","towns","sort","a","b","currentOccupancy","timer","setInterval","clearInterval","handleJoin","coveyRoomID","length","title","description","status","initData","setup","loggedIn","providerVideoToken","err","toString","handleCreate","newTownInfo","createTown","friendlyName","isPubliclyListed","privateMessage","coveyTownID","coveyTownPassword","isClosable","duration","event","target","value","e","checked","map","town","maximumOccupancy"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport assert from \"assert\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  Table,\n  TableCaption,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useToast\n} from '@chakra-ui/react';\nimport useVideoContext from '../VideoCall/VideoFrontend/hooks/useVideoContext/useVideoContext';\nimport Video from '../../classes/Video/Video';\nimport { CoveyTownInfo, TownJoinResponse, } from '../../classes/TownsServiceClient';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\n\ninterface TownSelectionProps {\n  doLogin: (initData: TownJoinResponse) => Promise<boolean>\n}\n\nexport default function TownSelection({ doLogin }: TownSelectionProps): JSX.Element {\n  const [userName, setUserName] = useState<string>(Video.instance()?.userName || '');\n  const [newTownName, setNewTownName] = useState<string>('');\n  const [newTownIsPublic, setNewTownIsPublic] = useState<boolean>(true);\n  const [townIDToJoin, setTownIDToJoin] = useState<string>('');\n  const [currentPublicTowns, setCurrentPublicTowns] = useState<CoveyTownInfo[]>();\n  const { connect } = useVideoContext();\n  const { apiClient } = useCoveyAppState();\n  const toast = useToast();\n\n  const updateTownListings = useCallback(() => {\n    // console.log(apiClient);\n    apiClient.listTowns()\n      .then((towns) => {\n        setCurrentPublicTowns(towns.towns\n          .sort((a, b) => b.currentOccupancy - a.currentOccupancy)\n        );\n      })\n  }, [setCurrentPublicTowns, apiClient]);\n  useEffect(() => {\n    updateTownListings();\n    const timer = setInterval(updateTownListings, 2000);\n    return () => {\n      clearInterval(timer)\n    };\n  }, [updateTownListings]);\n\n  const handleJoin = useCallback(async (coveyRoomID: string) => {\n    // // const response = await apiClient.townInfo({coveyTownID: coveyRoomID});\n    // console.log(response.currentPlayers);\n\n    try {\n      if (!userName || userName.length === 0) {\n        toast({\n          title: 'Unable to join town',\n          description: 'Please select a username',\n          status: 'error',\n        });\n        return;\n      }\n      // if (response.currentPlayers.includes(userName)) {\n      //   toast({\n      //     title: 'Unable to join town',\n      //     description: 'Your username is taken - please select a different username',\n      //     status: 'error',\n      //   });\n      //   return;\n      // }\n      if (!coveyRoomID || coveyRoomID.length === 0) {\n        toast({\n          title: 'Unable to join town',\n          description: 'Please enter a town ID',\n          status: 'error',\n        });\n        return;\n      }\n      const initData = await Video.setup(userName, coveyRoomID);\n\n      const loggedIn = await doLogin(initData);\n      if (loggedIn) {\n        assert(initData.providerVideoToken);\n        await connect(initData.providerVideoToken);\n      }\n    } catch (err) {\n      toast({\n        title: 'Unable to connect to Towns Service',\n        description: err.toString(),\n        status: 'error'\n      })\n    }\n  }, [apiClient, doLogin, userName, connect, toast]);\n\n  const handleCreate = async () => {\n    if (!userName || userName.length === 0) {\n      toast({\n        title: 'Unable to create town',\n        description: 'Please select a username before creating a town',\n        status: 'error',\n      });\n      return;\n    }\n    if (!newTownName || newTownName.length === 0) {\n      toast({\n        title: 'Unable to create town',\n        description: 'Please enter a town name',\n        status: 'error',\n      });\n      return;\n    }\n    try {\n      const newTownInfo = await apiClient.createTown({\n        friendlyName: newTownName,\n        isPubliclyListed: newTownIsPublic\n      });\n      let privateMessage = <></>;\n      if (!newTownIsPublic) {\n        privateMessage =\n          <p>This town will NOT be publicly listed. To re-enter it, you will need to use this\n            ID: {newTownInfo.coveyTownID}</p>;\n      }\n      toast({\n        title: `Town ${newTownName} is ready to go!`,\n        description: <>{privateMessage}Please record these values in case you need to change the\n          room:<br/>Town ID: {newTownInfo.coveyTownID}<br/>Town Editing\n          Password: {newTownInfo.coveyTownPassword}</>,\n        status: 'success',\n        isClosable: true,\n        duration: null,\n      })\n      await handleJoin(newTownInfo.coveyTownID);\n    } catch (err) {\n      toast({\n        title: 'Unable to connect to Towns Service',\n        description: err.toString(),\n        status: 'error'\n      })\n    }\n  };\n\n  return (\n    <>\n      <form>\n        <Stack>\n          <Box p=\"4\" borderWidth=\"1px\" borderRadius=\"lg\">\n            <Heading as=\"h2\" size=\"lg\">Select a username</Heading>\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input autoFocus name=\"name\" placeholder=\"Your name\"\n                     value={userName}\n                     onChange={event => setUserName(event.target.value)}\n              />\n            </FormControl>\n          </Box>\n          <Box borderWidth=\"1px\" borderRadius=\"lg\">\n            <Heading p=\"4\" as=\"h2\" size=\"lg\">Create a New Town</Heading>\n            <Flex p=\"4\">\n              <Box flex=\"1\">\n                <FormControl>\n                  <FormLabel htmlFor=\"townName\">New Town Name</FormLabel>\n                  <Input name=\"townName\" placeholder=\"New Town Name\"\n                         value={newTownName}\n                         onChange={event => setNewTownName(event.target.value)}\n                  />\n                </FormControl>\n              </Box><Box>\n              <FormControl>\n                <FormLabel htmlFor=\"isPublic\">Publicly Listed</FormLabel>\n                <Checkbox id=\"isPublic\" name=\"isPublic\" isChecked={newTownIsPublic}\n                          onChange={(e) => {\n                            setNewTownIsPublic(e.target.checked)\n                          }}/>\n              </FormControl>\n            </Box>\n              <Box>\n                <Button data-testid=\"newTownButton\" onClick={handleCreate}>Create</Button>\n              </Box>\n            </Flex>\n          </Box>\n          <Heading p=\"4\" as=\"h2\" size=\"lg\">-or-</Heading>\n\n          <Box borderWidth=\"1px\" borderRadius=\"lg\">\n            <Heading p=\"4\" as=\"h2\" size=\"lg\">Join an Existing Town</Heading>\n            <Box borderWidth=\"1px\" borderRadius=\"lg\">\n              <Flex p=\"4\"><FormControl>\n                <FormLabel htmlFor=\"townIDToJoin\">Town ID</FormLabel>\n                <Input name=\"townIDToJoin\" placeholder=\"ID of town to join, or select from list\"\n                       value={townIDToJoin}\n                       onChange={event => setTownIDToJoin(event.target.value)}/>\n              </FormControl>\n                <Button data-testid='joinTownByIDButton'\n                        onClick={() => handleJoin(townIDToJoin)}>Connect</Button>\n              </Flex>\n\n            </Box>\n\n            <Heading p=\"4\" as=\"h4\" size=\"md\">Select a public town to join</Heading>\n            <Box maxH=\"500px\" overflowY=\"scroll\">\n              <Table>\n                <TableCaption placement=\"bottom\">Publicly Listed Towns</TableCaption>\n                <Thead><Tr><Th>Room Name</Th><Th>Room ID</Th><Th>Activity</Th></Tr></Thead>\n                <Tbody>\n                  {currentPublicTowns?.map((town) => (\n                    <Tr key={town.coveyTownID}><Td role='cell'>{town.friendlyName}</Td><Td\n                      role='cell'>{town.coveyTownID}</Td>\n                      <Td role='cell'>{town.currentOccupancy}/{town.maximumOccupancy}\n                        <Button onClick={() => handleJoin(town.coveyTownID)}\n                                disabled={town.currentOccupancy >= town.maximumOccupancy}>Connect</Button></Td></Tr>\n                  ))}\n                </Tbody>\n              </Table>\n            </Box>\n          </Box>\n        </Stack>\n      </form>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}