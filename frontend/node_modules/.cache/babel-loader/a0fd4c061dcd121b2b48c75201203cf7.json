{"ast":null,"code":"import axios from 'axios';\nimport assert from 'assert';\nexport default class TownsServiceClient {\n  /**\n   * Construct a new Towns Service API client. Specify a serviceURL for testing, or otherwise\n   * defaults to the URL at the environmental variable REACT_APP_ROOMS_SERVICE_URL\n   * @param serviceURL\n   */\n  constructor(serviceURL) {\n    this._axios = void 0;\n    const baseURL = serviceURL || process.env.REACT_APP_TOWNS_SERVICE_URL;\n    assert(baseURL);\n    this._axios = axios.create({\n      baseURL\n    });\n  }\n\n  static unwrapOrThrowError(response, ignoreResponse = false) {\n    if (response.data.isOK) {\n      if (ignoreResponse) {\n        return {};\n      }\n\n      assert(response.data.response);\n      return response.data.response;\n    }\n\n    throw new Error(`Error processing request: ${response.data.message}`);\n  }\n\n  async createTown(requestData) {\n    const responseWrapper = await this._axios.post('/towns', requestData);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  }\n\n  async updateTown(requestData) {\n    const responseWrapper = await this._axios.patch(`/towns/${requestData.coveyTownID}`, requestData);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper, true);\n  }\n\n  async deleteTown(requestData) {\n    const responseWrapper = await this._axios.delete(`/towns/${requestData.coveyTownID}/${requestData.coveyTownPassword}`);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper, true);\n  }\n\n  async listTowns() {\n    const responseWrapper = await this._axios.get('/towns');\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  }\n\n  async townInfo(requestData) {\n    const responseWrapper = await this._axios.get(`/sessions/${requestData.coveyTownID}`);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  }\n\n  async joinTown(requestData) {\n    const responseWrapper = await this._axios.post('/sessions', requestData);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  } // async townInfo(requestData: TownJoinRequest): Promise<TownInfoResponse> {\n  //   const responseWrapper = await this._axios.get<ResponseEnvelope<TownInfoResponse>>('/sessions', requestData);\n  //   return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  // }\n\n\n}","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/classes/TownsServiceClient.ts"],"names":["axios","assert","TownsServiceClient","constructor","serviceURL","_axios","baseURL","process","env","REACT_APP_TOWNS_SERVICE_URL","create","unwrapOrThrowError","response","ignoreResponse","data","isOK","Error","message","createTown","requestData","responseWrapper","post","updateTown","patch","coveyTownID","deleteTown","delete","coveyTownPassword","listTowns","get","townInfo","joinTown"],"mappings":"AAAA,OAAOA,KAAP,MAAoD,OAApD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAmHA,eAAe,MAAMC,kBAAN,CAAyB;AAGtC;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,UAAD,EAAsB;AAAA,SAPzBC,MAOyB;AAC/B,UAAMC,OAAO,GAAGF,UAAU,IAAIG,OAAO,CAACC,GAAR,CAAYC,2BAA1C;AACAR,IAAAA,MAAM,CAACK,OAAD,CAAN;AACA,SAAKD,MAAL,GAAcL,KAAK,CAACU,MAAN,CAAa;AAAEJ,MAAAA;AAAF,KAAb,CAAd;AACD;;AAED,SAAOK,kBAAP,CAA6BC,QAA7B,EAA2EC,cAAc,GAAG,KAA5F,EAAsG;AACpG,QAAID,QAAQ,CAACE,IAAT,CAAcC,IAAlB,EAAwB;AACtB,UAAIF,cAAJ,EAAoB;AAClB,eAAO,EAAP;AACD;;AACDZ,MAAAA,MAAM,CAACW,QAAQ,CAACE,IAAT,CAAcF,QAAf,CAAN;AACA,aAAOA,QAAQ,CAACE,IAAT,CAAcF,QAArB;AACD;;AACD,UAAM,IAAII,KAAJ,CAAW,6BAA4BJ,QAAQ,CAACE,IAAT,CAAcG,OAAQ,EAA7D,CAAN;AACD;;AAED,QAAMC,UAAN,CAAiBC,WAAjB,EAA8E;AAC5E,UAAMC,eAAe,GAAG,MAAM,KAAKf,MAAL,CAAYgB,IAAZ,CAAuD,QAAvD,EAAiEF,WAAjE,CAA9B;AACA,WAAOjB,kBAAkB,CAACS,kBAAnB,CAAsCS,eAAtC,CAAP;AACD;;AAED,QAAME,UAAN,CAAiBH,WAAjB,EAAgE;AAC9D,UAAMC,eAAe,GAAG,MAAM,KAAKf,MAAL,CAAYkB,KAAZ,CAA2C,UAASJ,WAAW,CAACK,WAAY,EAA5E,EAA+EL,WAA/E,CAA9B;AACA,WAAOjB,kBAAkB,CAACS,kBAAnB,CAAsCS,eAAtC,EAAuD,IAAvD,CAAP;AACD;;AAED,QAAMK,UAAN,CAAiBN,WAAjB,EAAgE;AAC9D,UAAMC,eAAe,GAAG,MAAM,KAAKf,MAAL,CAAYqB,MAAZ,CAA4C,UAASP,WAAW,CAACK,WAAY,IAAGL,WAAW,CAACQ,iBAAkB,EAA9G,CAA9B;AACA,WAAOzB,kBAAkB,CAACS,kBAAnB,CAAsCS,eAAtC,EAAuD,IAAvD,CAAP;AACD;;AAED,QAAMQ,SAAN,GAA6C;AAC3C,UAAMR,eAAe,GAAG,MAAM,KAAKf,MAAL,CAAYwB,GAAZ,CAAoD,QAApD,CAA9B;AACA,WAAO3B,kBAAkB,CAACS,kBAAnB,CAAsCS,eAAtC,CAAP;AACD;;AAED,QAAMU,QAAN,CAAeX,WAAf,EAAwE;AACtE,UAAMC,eAAe,GAAG,MAAM,KAAKf,MAAL,CAAYwB,GAAZ,CAAqD,aAAYV,WAAW,CAACK,WAAY,EAAzF,CAA9B;AACA,WAAOtB,kBAAkB,CAACS,kBAAnB,CAAsCS,eAAtC,CAAP;AACD;;AAED,QAAMW,QAAN,CAAeZ,WAAf,EAAwE;AACtE,UAAMC,eAAe,GAAG,MAAM,KAAKf,MAAL,CAAYgB,IAAZ,CAAiB,WAAjB,EAA8BF,WAA9B,CAA9B;AACA,WAAOjB,kBAAkB,CAACS,kBAAnB,CAAsCS,eAAtC,CAAP;AACD,GArDqC,CAuDtC;AACA;AACA;AACA;;;AA1DsC","sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport assert from 'assert';\nimport { ServerPlayer } from './Player';\n\n\n/**\n * The format of a request to join a Town in Covey.Town, as dispatched by the server middleware\n */\nexport interface TownJoinRequest {\n  /** userName of the player that would like to join * */\n  userName: string;\n  /** ID of the town that the player would like to join * */\n  coveyTownID: string;\n}\n\n/**\n * The format of a response to join a Town in Covey.Town, as returned by the handler to the server\n * middleware\n */\nexport interface TownJoinResponse {\n  /** Unique ID that represents this player * */\n  coveyUserID: string;\n  /** Secret token that this player should use to authenticate\n   * in future requests to this service * */\n  coveySessionToken: string;\n  /** Secret token that this player should use to authenticate\n   * in future requests to the video service * */\n  providerVideoToken: string;\n  /** List of players currently in this town * */\n  currentPlayers: ServerPlayer[];\n  /** Friendly name of this town * */\n  friendlyName: string;\n  /** Is this a private town? * */\n  isPubliclyListed: boolean;\n\n}\n\n// /**\n//  * The format of a response to join a Town in Covey.Town, as returned by the handler to the server\n//  * middleware\n//  */\n//  export interface TownInfoResponse {\n//   /** List of players currently in this town * */\n//   currentPlayers: ServerPlayer[];\n\n\n\n// }\n\n/**\n * Payload sent by client to create a Town in Covey.Town\n */\nexport interface TownCreateRequest {\n  friendlyName: string;\n  isPubliclyListed: boolean;\n}\n\n/**\n * Response from the server for a Town create request\n */\nexport interface TownCreateResponse {\n  coveyTownID: string;\n  coveyTownPassword: string;\n}\n\n/**\n * Response from the server for a Town list request\n */\nexport interface TownListResponse {\n  towns: CoveyTownInfo[];\n}\n\n/**\n * Payload sent by the client to delete a Town\n */\nexport interface TownDeleteRequest {\n  coveyTownID: string;\n  coveyTownPassword: string;\n}\n\n/**\n * Payload sent by the client to update a Town.\n * N.B., JavaScript is terrible, so:\n * if(!isPubliclyListed) -> evaluates to true if the value is false OR undefined, use ===\n */\nexport interface TownUpdateRequest {\n  coveyTownID: string;\n  coveyTownPassword: string;\n  friendlyName?: string;\n  isPubliclyListed?: boolean;\n}\n\n/**\n * Envelope that wraps any response from the server\n */\nexport interface ResponseEnvelope<T> {\n  isOK: boolean;\n  message?: string;\n  response?: T;\n}\n\nexport type CoveyTownInfo = {\n  friendlyName: string;\n  coveyTownID: string;\n  currentOccupancy: number;\n  maximumOccupancy: number;\n};\n\n\nexport interface TownInfoRequest {\n  coveyTownID: string;\n}\nexport interface TownInfoResponse {\n  currentPlayers: ServerPlayer[];\n}\n\nexport default class TownsServiceClient {\n  private _axios: AxiosInstance;\n\n  /**\n   * Construct a new Towns Service API client. Specify a serviceURL for testing, or otherwise\n   * defaults to the URL at the environmental variable REACT_APP_ROOMS_SERVICE_URL\n   * @param serviceURL\n   */\n  constructor(serviceURL?: string) {\n    const baseURL = serviceURL || process.env.REACT_APP_TOWNS_SERVICE_URL;\n    assert(baseURL);\n    this._axios = axios.create({ baseURL });\n  }\n\n  static unwrapOrThrowError<T>(response: AxiosResponse<ResponseEnvelope<T>>, ignoreResponse = false): T {\n    if (response.data.isOK) {\n      if (ignoreResponse) {\n        return {} as T;\n      }\n      assert(response.data.response);\n      return response.data.response;\n    }\n    throw new Error(`Error processing request: ${response.data.message}`);\n  }\n\n  async createTown(requestData: TownCreateRequest): Promise<TownCreateResponse> {\n    const responseWrapper = await this._axios.post<ResponseEnvelope<TownCreateResponse>>('/towns', requestData);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  }\n\n  async updateTown(requestData: TownUpdateRequest): Promise<void> {\n    const responseWrapper = await this._axios.patch<ResponseEnvelope<void>>(`/towns/${requestData.coveyTownID}`, requestData);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper, true);\n  }\n\n  async deleteTown(requestData: TownDeleteRequest): Promise<void> {\n    const responseWrapper = await this._axios.delete<ResponseEnvelope<void>>(`/towns/${requestData.coveyTownID}/${requestData.coveyTownPassword}`);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper, true);\n  }\n\n  async listTowns(): Promise<TownListResponse> {\n    const responseWrapper = await this._axios.get<ResponseEnvelope<TownListResponse>>('/towns');\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  }\n\n  async townInfo(requestData: TownInfoRequest): Promise<TownInfoResponse> {\n    const responseWrapper = await this._axios.get<ResponseEnvelope<TownInfoResponse>>(`/sessions/${requestData.coveyTownID}`);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  }\n\n  async joinTown(requestData: TownJoinRequest): Promise<TownJoinResponse> {\n    const responseWrapper = await this._axios.post('/sessions', requestData);\n    return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  }\n\n  // async townInfo(requestData: TownJoinRequest): Promise<TownInfoResponse> {\n  //   const responseWrapper = await this._axios.get<ResponseEnvelope<TownInfoResponse>>('/sessions', requestData);\n  //   return TownsServiceClient.unwrapOrThrowError(responseWrapper);\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module"}