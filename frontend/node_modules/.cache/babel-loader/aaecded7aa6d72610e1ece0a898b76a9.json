{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport Video from 'twilio-video';\nimport { useMutex } from 'react-context-mutex';\nimport { useHasAudioInputDevices, useHasVideoInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nimport { DEFAULT_VIDEO_CONSTRAINTS } from '../../../constants';\nimport LocalStorage_TwilioVideo from '../../../../../../classes/LocalStorage/TwilioVideo';\nexport default function useLocalTracks() {\n  _s();\n\n  const [audioTrack, setAudioTrack] = useState();\n  const [videoTrack, setVideoTrack] = useState();\n  const [isAcquiringLocalTracks, setIsAcquiringLocalTracks] = useState(false);\n  const hasAudio = useHasAudioInputDevices();\n  const hasVideo = useHasVideoInputDevices();\n  const getLocalAudioTrack = useCallback(async deviceId => {\n    const options = {};\n\n    if (deviceId) {\n      options.deviceId = {\n        exact: deviceId\n      };\n    }\n\n    console.log('Running getLocalAudioTrack');\n    const newTrack = await Video.createLocalAudioTrack(options);\n    setAudioTrack(newTrack);\n    return newTrack;\n  }, []);\n  const getLocalVideoTrack = useCallback(newOptions => {\n    const options = {\n      // ...(DEFAULT_VIDEO_CONSTRAINTS as {}),\n      width: 640,\n      height: 480,\n      frameRate: 24,\n      name: `camera-${Date.now()}`,\n      ...newOptions\n    };\n    return Video.createLocalVideoTrack(options).then(newTrack => {\n      setVideoTrack(newTrack);\n      return newTrack;\n    });\n  }, []);\n  const removeLocalVideoTrack = useCallback(() => {\n    if (videoTrack) {\n      videoTrack.stop();\n      setVideoTrack(undefined);\n    }\n  }, [videoTrack]);\n  const removeLocalAudioTrack = useCallback(() => {\n    if (audioTrack) {\n      audioTrack.stop();\n      setAudioTrack(undefined);\n    }\n  }, [audioTrack]);\n  const MutexRunner = useMutex();\n  const getAudioAndVideoTracksMutex = new MutexRunner('getAudioAndVideoTracks');\n\n  const getAudioAndVideoTracks = async () => getAudioAndVideoTracksMutex.run(async () => {\n    getAudioAndVideoTracksMutex.lock();\n\n    try {\n      var _LocalStorage_TwilioV, _LocalStorage_TwilioV2;\n\n      if (!hasAudio && !hasVideo) return Promise.resolve();\n      if (audioTrack || videoTrack) return Promise.resolve();\n      console.log('Running getAudioAndVideoTracks');\n      setIsAcquiringLocalTracks(true);\n      const tracks = await Video.createLocalTracks({\n        video: hasVideo && { ...DEFAULT_VIDEO_CONSTRAINTS,\n          name: `camera-${Date.now()}`,\n          deviceId: (_LocalStorage_TwilioV = LocalStorage_TwilioVideo.twilioVideoLastCamera) !== null && _LocalStorage_TwilioV !== void 0 ? _LocalStorage_TwilioV : undefined\n        },\n        audio: hasAudio && {\n          deviceId: (_LocalStorage_TwilioV2 = LocalStorage_TwilioVideo.twilioVideoLastMic) !== null && _LocalStorage_TwilioV2 !== void 0 ? _LocalStorage_TwilioV2 : undefined\n        }\n      });\n\n      const _videoTrack = tracks.find(track => track.kind === 'video');\n\n      const _audioTrack = tracks.find(track => track.kind === 'audio');\n\n      if (_videoTrack) {\n        console.log('Running getAudioAndVideoTracks:setVideoTrack');\n        setVideoTrack(_videoTrack);\n      }\n\n      if (_audioTrack) {\n        console.log('Running getAudioAndVideoTracks:setAudioTrack');\n        setAudioTrack(_audioTrack);\n      }\n    } finally {\n      setIsAcquiringLocalTracks(false);\n      getAudioAndVideoTracksMutex.unlock();\n    }\n  }, () => {});\n\n  return {\n    audioTrack,\n    videoTrack,\n    getLocalVideoTrack,\n    getLocalAudioTrack,\n    isAcquiringLocalTracks,\n    removeLocalVideoTrack,\n    removeLocalAudioTrack,\n    getAudioAndVideoTracks\n  };\n}\n\n_s(useLocalTracks, \"eC1ZWTxnd7b5gRcxIIsNoI7THsE=\", false, function () {\n  return [useHasAudioInputDevices, useHasVideoInputDevices, useMutex];\n});","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/VideoProvider/useLocalTracks/useLocalTracks.ts"],"names":["useCallback","useState","Video","useMutex","useHasAudioInputDevices","useHasVideoInputDevices","DEFAULT_VIDEO_CONSTRAINTS","LocalStorage_TwilioVideo","useLocalTracks","audioTrack","setAudioTrack","videoTrack","setVideoTrack","isAcquiringLocalTracks","setIsAcquiringLocalTracks","hasAudio","hasVideo","getLocalAudioTrack","deviceId","options","exact","console","log","newTrack","createLocalAudioTrack","getLocalVideoTrack","newOptions","width","height","frameRate","name","Date","now","createLocalVideoTrack","then","removeLocalVideoTrack","stop","undefined","removeLocalAudioTrack","MutexRunner","getAudioAndVideoTracksMutex","getAudioAndVideoTracks","run","lock","Promise","resolve","tracks","createLocalTracks","video","twilioVideoLastCamera","audio","twilioVideoLastMic","_videoTrack","find","track","kind","_audioTrack","unlock"],"mappings":"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","sourcesContent":["import { useCallback, useState } from 'react';\nimport Video, { LocalVideoTrack, LocalAudioTrack, CreateLocalTrackOptions } from 'twilio-video';\nimport { useMutex } from 'react-context-mutex';\nimport { useHasAudioInputDevices, useHasVideoInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nimport { DEFAULT_VIDEO_CONSTRAINTS } from '../../../constants';\nimport LocalStorage_TwilioVideo from '../../../../../../classes/LocalStorage/TwilioVideo';\n\nexport default function useLocalTracks() {\n  const [audioTrack, setAudioTrack] = useState<LocalAudioTrack>();\n  const [videoTrack, setVideoTrack] = useState<LocalVideoTrack>();\n  const [isAcquiringLocalTracks, setIsAcquiringLocalTracks] = useState(false);\n\n  const hasAudio = useHasAudioInputDevices();\n  const hasVideo = useHasVideoInputDevices();\n\n  const getLocalAudioTrack = useCallback(async (deviceId?: string) => {\n    const options: CreateLocalTrackOptions = {};\n\n    if (deviceId) {\n      options.deviceId = { exact: deviceId };\n    }\n\n    console.log('Running getLocalAudioTrack');\n\n    const newTrack = await Video.createLocalAudioTrack(options);\n    setAudioTrack(newTrack);\n    return newTrack;\n  }, []);\n\n  const getLocalVideoTrack = useCallback((newOptions?: CreateLocalTrackOptions) => {\n    const options: CreateLocalTrackOptions = {\n      // ...(DEFAULT_VIDEO_CONSTRAINTS as {}),\n      width: 640,\n      height: 480,\n      frameRate: 24,\n      name: `camera-${Date.now()}`,\n      ...newOptions,\n    };\n\n    return Video.createLocalVideoTrack(options).then((newTrack) => {\n      setVideoTrack(newTrack);\n      return newTrack;\n    });\n  }, []);\n\n  const removeLocalVideoTrack = useCallback(() => {\n    if (videoTrack) {\n      videoTrack.stop();\n      setVideoTrack(undefined);\n    }\n  }, [videoTrack]);\n\n  const removeLocalAudioTrack = useCallback(() => {\n    if (audioTrack) {\n      audioTrack.stop();\n      setAudioTrack(undefined);\n    }\n  }, [audioTrack]);\n\n  const MutexRunner = useMutex();\n  const getAudioAndVideoTracksMutex = new MutexRunner('getAudioAndVideoTracks');\n  const getAudioAndVideoTracks = async () => getAudioAndVideoTracksMutex.run(\n    async () => {\n      getAudioAndVideoTracksMutex.lock();\n      try {\n        if (!hasAudio && !hasVideo) return Promise.resolve();\n        if (audioTrack || videoTrack) return Promise.resolve();\n\n        console.log('Running getAudioAndVideoTracks');\n\n        setIsAcquiringLocalTracks(true);\n        const tracks = await Video.createLocalTracks({\n          video: hasVideo && {\n            ...(DEFAULT_VIDEO_CONSTRAINTS as {}),\n            name: `camera-${Date.now()}`,\n            deviceId: LocalStorage_TwilioVideo.twilioVideoLastCamera ?? undefined,\n          },\n          audio: hasAudio && {\n            deviceId: LocalStorage_TwilioVideo.twilioVideoLastMic ?? undefined,\n          },\n        });\n\n        const _videoTrack = tracks.find((track) => track.kind === 'video');\n        const _audioTrack = tracks.find((track) => track.kind === 'audio');\n        if (_videoTrack) {\n          console.log('Running getAudioAndVideoTracks:setVideoTrack');\n          setVideoTrack(_videoTrack as LocalVideoTrack);\n        }\n        if (_audioTrack) {\n          console.log('Running getAudioAndVideoTracks:setAudioTrack');\n          setAudioTrack(_audioTrack as LocalAudioTrack);\n        }\n      } finally {\n        setIsAcquiringLocalTracks(false);\n        getAudioAndVideoTracksMutex.unlock();\n      }\n    },\n    () => {},\n  );\n\n  return {\n    audioTrack,\n    videoTrack,\n    getLocalVideoTrack,\n    getLocalAudioTrack,\n    isAcquiringLocalTracks,\n    removeLocalVideoTrack,\n    removeLocalAudioTrack,\n    getAudioAndVideoTracks,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}