{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport default function useVideoTrackDimensions(track) {\n  _s();\n\n  const [dimensions, setDimensions] = useState(track === null || track === void 0 ? void 0 : track.dimensions);\n  useEffect(() => {\n    setDimensions(track === null || track === void 0 ? void 0 : track.dimensions);\n\n    if (track) {\n      const handleDimensionsChanged = _track => setDimensions(_track === null || _track === void 0 ? void 0 : _track.dimensions);\n\n      track.on('dimensionsChanged', handleDimensionsChanged);\n      return () => {\n        track.off('dimensionsChanged', handleDimensionsChanged);\n      };\n    }\n\n    return () => {};\n  }, [track]);\n  return dimensions;\n}\n\n_s(useVideoTrackDimensions, \"RQJfxsgQLk9N/izaiyyGB32iEAY=\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/hooks/useVideoTrackDimensions/useVideoTrackDimensions.tsx"],"names":["useState","useEffect","useVideoTrackDimensions","track","dimensions","setDimensions","handleDimensionsChanged","_track","on","off"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAKA,eAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAAoD;AAAA;;AACjE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAACG,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEC,UAAR,CAA5C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,aAAa,CAACF,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEC,UAAR,CAAb;;AAEA,QAAID,KAAJ,EAAW;AACT,YAAMG,uBAAuB,GAAIC,MAAD,IAAuBF,aAAa,CAACE,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEH,UAAT,CAApE;;AACAD,MAAAA,KAAK,CAACK,EAAN,CAAS,mBAAT,EAA8BF,uBAA9B;AACA,aAAO,MAAM;AACXH,QAAAA,KAAK,CAACM,GAAN,CAAU,mBAAV,EAA+BH,uBAA/B;AACD,OAFD;AAGD;;AACD,WAAO,MAAM,CAAG,CAAhB;AACD,GAXQ,EAWN,CAACH,KAAD,CAXM,CAAT;AAaA,SAAOC,UAAP;AACD;;GAjBuBF,uB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { LocalVideoTrack, RemoteVideoTrack } from 'twilio-video';\n\ntype TrackType = LocalVideoTrack | RemoteVideoTrack;\n\nexport default function useVideoTrackDimensions(track?: TrackType) {\n  const [dimensions, setDimensions] = useState(track?.dimensions);\n\n  useEffect(() => {\n    setDimensions(track?.dimensions);\n\n    if (track) {\n      const handleDimensionsChanged = (_track: TrackType) => setDimensions(_track?.dimensions);\n      track.on('dimensionsChanged', handleDimensionsChanged);\n      return () => {\n        track.off('dimensionsChanged', handleDimensionsChanged);\n      };\n    }\n    return () => { };\n  }, [track]);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}