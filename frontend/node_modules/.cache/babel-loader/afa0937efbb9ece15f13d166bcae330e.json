{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/VideoTrack/VideoTrack.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport useMediaStreamTrack from '../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoTrackDimensions from '../../hooks/useVideoTrackDimensions/useVideoTrackDimensions';\nconst Video = styled('video')({\n  maxWidth: '100%',\n  maxHeight: '100%',\n  width: '100%',\n  objectFit: 'contain'\n});\nexport default function VideoTrack({\n  track,\n  isLocal,\n  priority\n}) {\n  _s();\n\n  var _dimensions$height, _dimensions$width;\n\n  const ref = useRef(null);\n  const mediaStreamTrack = useMediaStreamTrack(track);\n  const dimensions = useVideoTrackDimensions(track);\n  const isPortrait = ((_dimensions$height = dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) !== null && _dimensions$height !== void 0 ? _dimensions$height : 0) > ((_dimensions$width = dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) !== null && _dimensions$width !== void 0 ? _dimensions$width : 0);\n  useEffect(() => {\n    const el = ref.current;\n    el.muted = true;\n\n    if (track.setPriority && priority) {\n      track.setPriority(priority);\n    }\n\n    track.attach(el);\n    return () => {\n      track.detach(el);\n\n      if (track.setPriority && priority) {\n        // Passing `null` to setPriority will set the track's priority to that which it was published with.\n        track.setPriority(null);\n      }\n    };\n  }, [track, priority]); // The local video track is mirrored if it is not facing the environment.\n\n  const isFrontFacing = (mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.getSettings().facingMode) !== 'environment';\n  const style = {\n    transform: isLocal && isFrontFacing ? 'rotateY(180deg)' : '',\n    objectFit: isPortrait || track.name.includes('screen') ? 'contain' : 'cover'\n  };\n  return /*#__PURE__*/_jsxDEV(Video, {\n    ref: ref,\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n\n_s(VideoTrack, \"ZahdhZCjxZiFUBbe10tJMvLaDvg=\", false, function () {\n  return [useMediaStreamTrack, useVideoTrackDimensions];\n});\n\n_c = VideoTrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoTrack\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/VideoTrack/VideoTrack.tsx"],"names":["React","useRef","useEffect","styled","useMediaStreamTrack","useVideoTrackDimensions","Video","maxWidth","maxHeight","width","objectFit","VideoTrack","track","isLocal","priority","ref","mediaStreamTrack","dimensions","isPortrait","height","el","current","muted","setPriority","attach","detach","isFrontFacing","getSettings","facingMode","style","transform","name","includes"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAGA,OAAOC,mBAAP,MAAgC,qDAAhC;AACA,OAAOC,uBAAP,MAAoC,6DAApC;AAEA,MAAMC,KAAK,GAAGH,MAAM,CAAC,OAAD,CAAN,CAAgB;AAC5BI,EAAAA,QAAQ,EAAE,MADkB;AAE5BC,EAAAA,SAAS,EAAE,MAFiB;AAG5BC,EAAAA,KAAK,EAAE,MAHqB;AAI5BC,EAAAA,SAAS,EAAE;AAJiB,CAAhB,CAAd;AAaA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAApB,EAAmE;AAAA;;AAAA;;AAChF,QAAMC,GAAG,GAAGd,MAAM,CAAmB,IAAnB,CAAlB;AACA,QAAMe,gBAAgB,GAAGZ,mBAAmB,CAACQ,KAAD,CAA5C;AACA,QAAMK,UAAU,GAAGZ,uBAAuB,CAACO,KAAD,CAA1C;AACA,QAAMM,UAAU,GAAG,uBAACD,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEE,MAAb,mEAAuB,CAAvB,0BAA6BF,UAA7B,aAA6BA,UAA7B,uBAA6BA,UAAU,CAAER,KAAzC,iEAAkD,CAAlD,CAAnB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,EAAE,GAAGL,GAAG,CAACM,OAAf;AACAD,IAAAA,EAAE,CAACE,KAAH,GAAW,IAAX;;AACA,QAAIV,KAAK,CAACW,WAAN,IAAqBT,QAAzB,EAAmC;AACjCF,MAAAA,KAAK,CAACW,WAAN,CAAkBT,QAAlB;AACD;;AACDF,IAAAA,KAAK,CAACY,MAAN,CAAaJ,EAAb;AACA,WAAO,MAAM;AACXR,MAAAA,KAAK,CAACa,MAAN,CAAaL,EAAb;;AACA,UAAIR,KAAK,CAACW,WAAN,IAAqBT,QAAzB,EAAmC;AACjC;AACAF,QAAAA,KAAK,CAACW,WAAN,CAAkB,IAAlB;AACD;AACF,KAND;AAOD,GAdQ,EAcN,CAACX,KAAD,EAAQE,QAAR,CAdM,CAAT,CANgF,CAsBhF;;AACA,QAAMY,aAAa,GAAG,CAAAV,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEW,WAAlB,GAAgCC,UAAhC,MAA+C,aAArE;AACA,QAAMC,KAAK,GAAG;AACZC,IAAAA,SAAS,EAAEjB,OAAO,IAAIa,aAAX,GAA2B,iBAA3B,GAA+C,EAD9C;AAEZhB,IAAAA,SAAS,EAAEQ,UAAU,IAAIN,KAAK,CAACmB,IAAN,CAAWC,QAAX,CAAoB,QAApB,CAAd,GAA+C,SAA/C,GAAsE;AAFrE,GAAd;AAKA,sBAAO,QAAC,KAAD;AAAO,IAAA,GAAG,EAAEjB,GAAZ;AAAiB,IAAA,KAAK,EAAEc;AAAxB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA9BuBlB,U;UAEGP,mB,EACNC,uB;;;KAHGM,U","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport { Track } from 'twilio-video';\nimport { IVideoTrack } from '../../types';\nimport useMediaStreamTrack from '../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoTrackDimensions from '../../hooks/useVideoTrackDimensions/useVideoTrackDimensions';\n\nconst Video = styled('video')({\n  maxWidth: '100%',\n  maxHeight: '100%',\n  width: '100%',\n  objectFit: 'contain',\n});\n\ninterface VideoTrackProps {\n  track: IVideoTrack;\n  isLocal?: boolean;\n  priority?: Track.Priority | null;\n}\n\nexport default function VideoTrack({ track, isLocal, priority }: VideoTrackProps) {\n  const ref = useRef<HTMLVideoElement>(null!);\n  const mediaStreamTrack = useMediaStreamTrack(track);\n  const dimensions = useVideoTrackDimensions(track);\n  const isPortrait = (dimensions?.height ?? 0) > (dimensions?.width ?? 0);\n\n  useEffect(() => {\n    const el = ref.current;\n    el.muted = true;\n    if (track.setPriority && priority) {\n      track.setPriority(priority);\n    }\n    track.attach(el);\n    return () => {\n      track.detach(el);\n      if (track.setPriority && priority) {\n        // Passing `null` to setPriority will set the track's priority to that which it was published with.\n        track.setPriority(null);\n      }\n    };\n  }, [track, priority]);\n\n  // The local video track is mirrored if it is not facing the environment.\n  const isFrontFacing = mediaStreamTrack?.getSettings().facingMode !== 'environment';\n  const style = {\n    transform: isLocal && isFrontFacing ? 'rotateY(180deg)' : '',\n    objectFit: isPortrait || track.name.includes('screen') ? ('contain' as const) : ('cover' as const),\n  };\n\n  return <Video ref={ref} style={style} />;\n}\n"]},"metadata":{},"sourceType":"module"}