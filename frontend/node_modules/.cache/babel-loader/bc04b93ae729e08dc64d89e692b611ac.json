{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/Buttons/ToggleAudioButton/ToggleAudioButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport MicIcon from '../../../icons/MicIcon';\nimport MicOffIcon from '../../../icons/MicOffIcon';\nimport useLocalAudioToggle from '../../../hooks/useLocalAudioToggle/useLocalAudioToggle';\nimport { useHasAudioInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nexport default function ToggleAudioButton(props) {\n  _s();\n\n  const {\n    isEnabled: isAudioEnabled,\n    toggleAudioEnabled\n  } = useLocalAudioToggle();\n  const lastClickTimeRef = useRef(0);\n  const hasAudioDevices = useHasAudioInputDevices();\n  const toggleAudio = useCallback(async () => {\n    if (Date.now() - lastClickTimeRef.current > 200) {\n      lastClickTimeRef.current = Date.now();\n\n      try {\n        await toggleAudioEnabled();\n      } catch (e) {\n        if (props.setMediaError) {\n          props.setMediaError(e);\n        }\n      }\n    }\n  }, [props, toggleAudioEnabled]);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    className: props.className,\n    onClick: toggleAudio,\n    disabled: props.disabled || !hasAudioDevices,\n    startIcon: isAudioEnabled ? /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 35\n    }, this) : /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 49\n    }, this),\n    \"data-cy-audio-toggle\": true,\n    children: !hasAudioDevices ? 'No audio devices' : isAudioEnabled ? 'Mute' : 'Unmute'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ToggleAudioButton, \"QNvr3bL+ZZuXyVRJcngbUhwK64o=\", false, function () {\n  return [useLocalAudioToggle, useHasAudioInputDevices];\n});\n\n_c = ToggleAudioButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleAudioButton\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/Buttons/ToggleAudioButton/ToggleAudioButton.tsx"],"names":["React","useCallback","useRef","Button","MicIcon","MicOffIcon","useLocalAudioToggle","useHasAudioInputDevices","ToggleAudioButton","props","isEnabled","isAudioEnabled","toggleAudioEnabled","lastClickTimeRef","hasAudioDevices","toggleAudio","Date","now","current","e","setMediaError","className","disabled"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,OAAOC,mBAAP,MAAgC,wDAAhC;AACA,SAASC,uBAAT,QAAwC,wCAAxC;AAEA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAIZ;AAAA;;AACD,QAAM;AAAEC,IAAAA,SAAS,EAAEC,cAAb;AAA6BC,IAAAA;AAA7B,MAAoDN,mBAAmB,EAA7E;AACA,QAAMO,gBAAgB,GAAGX,MAAM,CAAC,CAAD,CAA/B;AACA,QAAMY,eAAe,GAAGP,uBAAuB,EAA/C;AAEA,QAAMQ,WAAW,GAAGd,WAAW,CAAC,YAAY;AAC1C,QAAIe,IAAI,CAACC,GAAL,KAAaJ,gBAAgB,CAACK,OAA9B,GAAwC,GAA5C,EAAiD;AAC/CL,MAAAA,gBAAgB,CAACK,OAAjB,GAA2BF,IAAI,CAACC,GAAL,EAA3B;;AACA,UAAI;AACF,cAAML,kBAAkB,EAAxB;AACD,OAFD,CAEE,OAAOO,CAAP,EAAU;AACV,YAAIV,KAAK,CAACW,aAAV,EAAyB;AACvBX,UAAAA,KAAK,CAACW,aAAN,CAAoBD,CAApB;AACD;AACF;AACF;AACF,GAX8B,EAW5B,CAACV,KAAD,EAAQG,kBAAR,CAX4B,CAA/B;AAaA,sBACE,QAAC,MAAD;AACE,IAAA,SAAS,EAAEH,KAAK,CAACY,SADnB;AAEE,IAAA,OAAO,EAAEN,WAFX;AAGE,IAAA,QAAQ,EAAEN,KAAK,CAACa,QAAN,IAAkB,CAACR,eAH/B;AAIE,IAAA,SAAS,EAAEH,cAAc,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAiB,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAJ5C;AAKE,gCALF;AAAA,cAOG,CAACG,eAAD,GAAmB,kBAAnB,GAAwCH,cAAc,GAAG,MAAH,GAAY;AAPrE;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAjCuBH,iB;UAKoCF,mB,EAElCC,uB;;;KAPFC,iB","sourcesContent":["import React, { useCallback, useRef } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport MicIcon from '../../../icons/MicIcon';\nimport MicOffIcon from '../../../icons/MicOffIcon';\n\nimport useLocalAudioToggle from '../../../hooks/useLocalAudioToggle/useLocalAudioToggle';\nimport { useHasAudioInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\n\nexport default function ToggleAudioButton(props: {\n  disabled?: boolean;\n  className?: string;\n  setMediaError?(error: Error): void;\n}) {\n  const { isEnabled: isAudioEnabled, toggleAudioEnabled } = useLocalAudioToggle();\n  const lastClickTimeRef = useRef(0);\n  const hasAudioDevices = useHasAudioInputDevices();\n\n  const toggleAudio = useCallback(async () => {\n    if (Date.now() - lastClickTimeRef.current > 200) {\n      lastClickTimeRef.current = Date.now();\n      try {\n        await toggleAudioEnabled();\n      } catch (e) {\n        if (props.setMediaError) {\n          props.setMediaError(e);\n        }\n      }\n    }\n  }, [props, toggleAudioEnabled]);\n\n  return (\n    <Button\n      className={props.className}\n      onClick={toggleAudio}\n      disabled={props.disabled || !hasAudioDevices}\n      startIcon={isAudioEnabled ? <MicIcon /> : <MicOffIcon />}\n      data-cy-audio-toggle\n    >\n      {!hasAudioDevices ? 'No audio devices' : isAudioEnabled ? 'Mute' : 'Unmute'}\n    </Button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}