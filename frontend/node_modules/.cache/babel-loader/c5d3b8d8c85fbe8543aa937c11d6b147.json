{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport useVideoContext from '../useVideoContext/useVideoContext';\nimport LocalStorage_TwilioVideo from '../../../../../classes/LocalStorage/TwilioVideo';\nexport default function useLocalVideoToggle() {\n  _s();\n\n  const {\n    room: {\n      localParticipant\n    },\n    localVideoTrack: videoTrack,\n    getLocalVideoTrack,\n    removeLocalVideoTrack\n  } = useVideoContext();\n  const [isPublishing, setIsPublishing] = useState(false);\n  const stopVideo = useCallback(() => {\n    if (videoTrack) {\n      var _videoTrack$mediaStre;\n\n      LocalStorage_TwilioVideo.twilioVideoLastCamera = (_videoTrack$mediaStre = videoTrack.mediaStreamTrack.getSettings().deviceId) !== null && _videoTrack$mediaStre !== void 0 ? _videoTrack$mediaStre : null;\n      const localTrackPublication = localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.unpublishTrack(videoTrack); // TODO: remove when SDK implements this event. See: https://issues.corp.twilio.com/browse/JSDK-2592\n\n      localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.emit('trackUnpublished', localTrackPublication);\n      removeLocalVideoTrack();\n    }\n  }, [localParticipant, removeLocalVideoTrack, videoTrack]);\n  const toggleVideoEnabled = useCallback(async () => {\n    if (!isPublishing) {\n      if (videoTrack) {\n        stopVideo();\n        LocalStorage_TwilioVideo.twilioVideoCameraEnabled = false;\n      } else {\n        setIsPublishing(true);\n\n        try {\n          LocalStorage_TwilioVideo.twilioVideoCameraEnabled = true;\n          const lastCamera = LocalStorage_TwilioVideo.twilioVideoLastCamera;\n          const track = lastCamera ? await getLocalVideoTrack({\n            deviceId: {\n              exact: lastCamera\n            }\n          }) : await getLocalVideoTrack();\n          localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.publishTrack(track, {\n            priority: 'low'\n          });\n        } catch (e) {\n          // If the device is not readable (probably in use by another app), don't try to\n          // use it next time.\n          console.log(e.name);\n\n          if ((e === null || e === void 0 ? void 0 : e.name) === 'NotReadableError' || (e === null || e === void 0 ? void 0 : e.name) === 'OverconstrainedError') {\n            LocalStorage_TwilioVideo.twilioVideoLastCamera = null;\n          }\n\n          throw e;\n        } finally {\n          setIsPublishing(false);\n        }\n      }\n    }\n  }, [isPublishing, videoTrack, stopVideo, getLocalVideoTrack, localParticipant]);\n  return {\n    isEnabled: !!videoTrack,\n    toggleVideoEnabled,\n    stopVideo\n  };\n}\n\n_s(useLocalVideoToggle, \"vKSfwH3tdL8npJ6ywkZ47xQwjmE=\", false, function () {\n  return [useVideoContext];\n});","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/hooks/useLocalVideoToggle/useLocalVideoToggle.tsx"],"names":["useCallback","useState","useVideoContext","LocalStorage_TwilioVideo","useLocalVideoToggle","room","localParticipant","localVideoTrack","videoTrack","getLocalVideoTrack","removeLocalVideoTrack","isPublishing","setIsPublishing","stopVideo","twilioVideoLastCamera","mediaStreamTrack","getSettings","deviceId","localTrackPublication","unpublishTrack","emit","toggleVideoEnabled","twilioVideoCameraEnabled","lastCamera","track","exact","publishTrack","priority","e","console","log","name","isEnabled"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,wBAAP,MAAqC,iDAArC;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAAA;;AAC5C,QAAM;AACJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF,KADF;AAEJC,IAAAA,eAAe,EAAEC,UAFb;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA;AAJI,MAKFR,eAAe,EALnB;AAMA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMY,SAAS,GAAGb,WAAW,CAAC,MAAM;AAClC,QAAIQ,UAAJ,EAAgB;AAAA;;AACdL,MAAAA,wBAAwB,CAACW,qBAAzB,4BAAiDN,UAAU,CAACO,gBAAX,CAA4BC,WAA5B,GAA0CC,QAA3F,yEAAuG,IAAvG;AACA,YAAMC,qBAAqB,GAAGZ,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEa,cAAlB,CAAiCX,UAAjC,CAA9B,CAFc,CAGd;;AACAF,MAAAA,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEc,IAAlB,CAAuB,kBAAvB,EAA2CF,qBAA3C;AACAR,MAAAA,qBAAqB;AACtB;AACF,GAR4B,EAQ1B,CAACJ,gBAAD,EAAmBI,qBAAnB,EAA0CF,UAA1C,CAR0B,CAA7B;AAUA,QAAMa,kBAAkB,GAAGrB,WAAW,CAAC,YAAY;AACjD,QAAI,CAACW,YAAL,EAAmB;AACjB,UAAIH,UAAJ,EAAgB;AACdK,QAAAA,SAAS;AACTV,QAAAA,wBAAwB,CAACmB,wBAAzB,GAAoD,KAApD;AACD,OAHD,MAGO;AACLV,QAAAA,eAAe,CAAC,IAAD,CAAf;;AACA,YAAI;AACFT,UAAAA,wBAAwB,CAACmB,wBAAzB,GAAoD,IAApD;AACA,gBAAMC,UAAU,GAAGpB,wBAAwB,CAACW,qBAA5C;AACA,gBAAMU,KAAK,GAAGD,UAAU,GACpB,MAAMd,kBAAkB,CAAC;AACzBQ,YAAAA,QAAQ,EAAE;AAAEQ,cAAAA,KAAK,EAAEF;AAAT;AADe,WAAD,CADJ,GAIpB,MAAMd,kBAAkB,EAJ5B;AAKAH,UAAAA,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEoB,YAAlB,CAA+BF,KAA/B,EAAsC;AAAEG,YAAAA,QAAQ,EAAE;AAAZ,WAAtC;AACD,SATD,CASE,OAAOC,CAAP,EAAU;AACV;AACA;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,IAAd;;AACA,cAAI,CAAAH,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEG,IAAH,MAAY,kBAAZ,IAAkC,CAAAH,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEG,IAAH,MAAY,sBAAlD,EAA0E;AACxE5B,YAAAA,wBAAwB,CAACW,qBAAzB,GAAiD,IAAjD;AACD;;AACD,gBAAMc,CAAN;AACD,SAjBD,SAiBU;AACRhB,UAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF;AACF;AACF,GA7BqC,EA6BnC,CAACD,YAAD,EAAeH,UAAf,EAA2BK,SAA3B,EAAsCJ,kBAAtC,EAA0DH,gBAA1D,CA7BmC,CAAtC;AA+BA,SAAO;AAAE0B,IAAAA,SAAS,EAAE,CAAC,CAACxB,UAAf;AAA2Ba,IAAAA,kBAA3B;AAA+CR,IAAAA;AAA/C,GAAP;AACD;;GAnDuBT,mB;UAMlBF,e","sourcesContent":["import { useCallback, useState } from 'react';\nimport useVideoContext from '../useVideoContext/useVideoContext';\nimport LocalStorage_TwilioVideo from '../../../../../classes/LocalStorage/TwilioVideo';\n\nexport default function useLocalVideoToggle() {\n  const {\n    room: { localParticipant },\n    localVideoTrack: videoTrack,\n    getLocalVideoTrack,\n    removeLocalVideoTrack,\n  } = useVideoContext();\n  const [isPublishing, setIsPublishing] = useState(false);\n\n  const stopVideo = useCallback(() => {\n    if (videoTrack) {\n      LocalStorage_TwilioVideo.twilioVideoLastCamera = videoTrack.mediaStreamTrack.getSettings().deviceId ?? null;\n      const localTrackPublication = localParticipant?.unpublishTrack(videoTrack);\n      // TODO: remove when SDK implements this event. See: https://issues.corp.twilio.com/browse/JSDK-2592\n      localParticipant?.emit('trackUnpublished', localTrackPublication);\n      removeLocalVideoTrack();\n    }\n  }, [localParticipant, removeLocalVideoTrack, videoTrack]);\n\n  const toggleVideoEnabled = useCallback(async () => {\n    if (!isPublishing) {\n      if (videoTrack) {\n        stopVideo();\n        LocalStorage_TwilioVideo.twilioVideoCameraEnabled = false;\n      } else {\n        setIsPublishing(true);\n        try {\n          LocalStorage_TwilioVideo.twilioVideoCameraEnabled = true;\n          const lastCamera = LocalStorage_TwilioVideo.twilioVideoLastCamera;\n          const track = lastCamera\n            ? await getLocalVideoTrack({\n              deviceId: { exact: lastCamera },\n            })\n            : await getLocalVideoTrack();\n          localParticipant?.publishTrack(track, { priority: 'low' });\n        } catch (e) {\n          // If the device is not readable (probably in use by another app), don't try to\n          // use it next time.\n          console.log(e.name);\n          if (e?.name === 'NotReadableError' || e?.name === 'OverconstrainedError') {\n            LocalStorage_TwilioVideo.twilioVideoLastCamera = null;\n          }\n          throw e;\n        } finally {\n          setIsPublishing(false);\n        }\n      }\n    }\n  }, [isPublishing, videoTrack, stopVideo, getLocalVideoTrack, localParticipant]);\n\n  return { isEnabled: !!videoTrack, toggleVideoEnabled, stopVideo } as const;\n}\n"]},"metadata":{},"sourceType":"module"}