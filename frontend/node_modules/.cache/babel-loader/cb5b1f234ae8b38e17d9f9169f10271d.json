{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/components/DeviceSelectionDialog/AudioInputList/AudioInputList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { FormControl, MenuItem, Typography, Select, Grid } from '@material-ui/core';\nimport AudioLevelIndicator from '../../AudioLevelIndicator/AudioLevelIndicator';\nimport { useAudioInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nimport useMediaStreamTrack from '../../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nimport LocalStorage_TwilioVideo from '../../../../../../classes/LocalStorage/TwilioVideo';\nexport default function AudioInputList() {\n  _s();\n\n  const audioInputDevices = useAudioInputDevices();\n  const {\n    localAudioTrack\n  } = useVideoContext();\n  const mediaStreamTrack = useMediaStreamTrack(localAudioTrack);\n  const localAudioInputDeviceId = mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.getSettings().deviceId;\n  const [lastAudioDeviceId, _setLastAudioDeviceId] = useState(LocalStorage_TwilioVideo.twilioVideoLastMic);\n  const setLastAudioDeviceId = useCallback(deviceId => {\n    LocalStorage_TwilioVideo.twilioVideoLastMic = deviceId;\n\n    _setLastAudioDeviceId(deviceId);\n  }, []);\n\n  function replaceTrack(newDeviceId) {\n    setLastAudioDeviceId(newDeviceId);\n    localAudioTrack === null || localAudioTrack === void 0 ? void 0 : localAudioTrack.restart({\n      deviceId: {\n        exact: newDeviceId\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      gutterBottom: true,\n      children: \"Audio Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justify: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputSelect\",\n        children: audioInputDevices.length > 1 ? /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            onChange: e => replaceTrack(e.target.value),\n            value: localAudioInputDeviceId || lastAudioDeviceId,\n            variant: \"outlined\",\n            children: audioInputDevices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: device.deviceId,\n              children: device.label\n            }, device.deviceId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: (localAudioTrack === null || localAudioTrack === void 0 ? void 0 : localAudioTrack.mediaStreamTrack.label) || 'No Local Audio'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioLevelIndicator, {\n        audioTrack: localAudioTrack,\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AudioInputList, \"GKAU3vrsBsliT1yHwCHoqIOelYo=\", false, function () {\n  return [useAudioInputDevices, useVideoContext, useMediaStreamTrack];\n});\n\n_c = AudioInputList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioInputList\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/VideoCall/VideoFrontend/components/DeviceSelectionDialog/AudioInputList/AudioInputList.tsx"],"names":["React","useCallback","useState","FormControl","MenuItem","Typography","Select","Grid","AudioLevelIndicator","useAudioInputDevices","useMediaStreamTrack","useVideoContext","LocalStorage_TwilioVideo","AudioInputList","audioInputDevices","localAudioTrack","mediaStreamTrack","localAudioInputDeviceId","getSettings","deviceId","lastAudioDeviceId","_setLastAudioDeviceId","twilioVideoLastMic","setLastAudioDeviceId","replaceTrack","newDeviceId","restart","exact","length","e","target","value","map","device","label"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport {\n  FormControl, MenuItem, Typography, Select, Grid,\n} from '@material-ui/core';\nimport AudioLevelIndicator from '../../AudioLevelIndicator/AudioLevelIndicator';\nimport { useAudioInputDevices } from '../../../hooks/deviceHooks/deviceHooks';\nimport useMediaStreamTrack from '../../../hooks/useMediaStreamTrack/useMediaStreamTrack';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nimport LocalStorage_TwilioVideo from '../../../../../../classes/LocalStorage/TwilioVideo';\n\nexport default function AudioInputList() {\n  const audioInputDevices = useAudioInputDevices();\n  const { localAudioTrack } = useVideoContext();\n\n  const mediaStreamTrack = useMediaStreamTrack(localAudioTrack);\n  const localAudioInputDeviceId = mediaStreamTrack?.getSettings().deviceId;\n  const [lastAudioDeviceId, _setLastAudioDeviceId] = useState<string | null>(\n    LocalStorage_TwilioVideo.twilioVideoLastMic,\n  );\n\n  const setLastAudioDeviceId = useCallback((deviceId: string | null) => {\n    LocalStorage_TwilioVideo.twilioVideoLastMic = deviceId;\n    _setLastAudioDeviceId(deviceId);\n  }, []);\n\n  function replaceTrack(newDeviceId: string) {\n    setLastAudioDeviceId(newDeviceId);\n    localAudioTrack?.restart({ deviceId: { exact: newDeviceId } });\n  }\n\n  return (\n    <div>\n      <Typography variant=\"subtitle2\" gutterBottom>\n        Audio Input\n      </Typography>\n      <Grid container alignItems=\"center\" justify=\"space-between\">\n        <div className=\"inputSelect\">\n          {audioInputDevices.length > 1 ? (\n            <FormControl fullWidth>\n              <Select\n                onChange={(e) => replaceTrack(e.target.value as string)}\n                value={localAudioInputDeviceId || lastAudioDeviceId}\n                variant=\"outlined\"\n              >\n                {audioInputDevices.map((device) => (\n                  <MenuItem value={device.deviceId} key={device.deviceId}>\n                    {device.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          ) : (\n            <Typography>{localAudioTrack?.mediaStreamTrack.label || 'No Local Audio'}</Typography>\n          )}\n        </div>\n        <AudioLevelIndicator audioTrack={localAudioTrack} color=\"black\" />\n      </Grid>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}