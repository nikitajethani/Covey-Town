{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/world/WorldMap.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Phaser from 'phaser';\nimport Player from '../../classes/Player';\nimport Video from '../../classes/Video/Video';\nimport useCoveyAppState from '../../hooks/useCoveyAppState'; // https://medium.com/@michaelwesthadley/modular-game-worlds-in-phaser-3-tilemaps-1-958fc7e6bbd6\n\nclass CoveyGameScene extends Phaser.Scene {\n  constructor(video, emitMovement) {\n    super('PlayGame');\n    this.player = void 0;\n    this.id = void 0;\n    this.players = [];\n    this.cursors = [];\n    this.lastLocation = void 0;\n    this.ready = false;\n    this.video = void 0;\n    this.emitMovement = void 0;\n    this.video = video;\n    this.emitMovement = emitMovement;\n  }\n\n  preload() {\n    // this.load.image(\"logo\", logoImg);\n    this.load.image('tiles', '/assets/tilesets/tuxmon-sample-32px-extruded.png');\n    this.load.tilemapTiledJSON('map', '/assets/tilemaps/tuxemon-town.json');\n    this.load.atlas('atlas', '/assets/atlas/atlas.png', '/assets/atlas/atlas.json');\n  }\n\n  updatePlayersLocations(players) {\n    if (!this.ready) {\n      this.players = players;\n      return;\n    }\n\n    players.forEach(p => {\n      this.updatePlayerLocation(p);\n    }); // Remove disconnected players from board\n\n    const disconnectedPlayers = this.players.filter(player => !players.find(p => p.id === player.id));\n    disconnectedPlayers.forEach(disconnectedPlayer => {\n      if (disconnectedPlayer.sprite) {\n        var _disconnectedPlayer$l;\n\n        disconnectedPlayer.sprite.destroy();\n        (_disconnectedPlayer$l = disconnectedPlayer.label) === null || _disconnectedPlayer$l === void 0 ? void 0 : _disconnectedPlayer$l.destroy();\n      }\n    }); // Remove disconnected players from list\n\n    if (disconnectedPlayers.length) {\n      this.players = this.players.filter(player => !disconnectedPlayers.find(p => p.id === player.id));\n    }\n  }\n\n  updatePlayerLocation(player) {\n    let myPlayer = this.players.find(p => p.id === player.id);\n\n    if (!myPlayer) {\n      let {\n        location\n      } = player;\n\n      if (!location) {\n        location = {\n          rotation: 'back',\n          moving: false,\n          x: 0,\n          y: 0\n        };\n      }\n\n      myPlayer = new Player(player.id, player.userName, location);\n      this.players.push(myPlayer);\n    }\n\n    if (this.id !== myPlayer.id && this.physics && player.location) {\n      var _myPlayer$label, _myPlayer$label2;\n\n      let {\n        sprite\n      } = myPlayer;\n\n      if (!sprite) {\n        sprite = this.physics.add // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - JB todo\n        .sprite(0, 0, 'atlas', 'misa-front').setSize(30, 40).setOffset(0, 24);\n        const label = this.add.text(0, 0, myPlayer.userName, {\n          font: '18px monospace',\n          fill: '#000000',\n          backgroundColor: '#ffffff'\n        });\n        myPlayer.label = label;\n        myPlayer.sprite = sprite;\n      }\n\n      if (!sprite.anims) return;\n      sprite.setX(player.location.x);\n      sprite.setY(player.location.y);\n      (_myPlayer$label = myPlayer.label) === null || _myPlayer$label === void 0 ? void 0 : _myPlayer$label.setX(player.location.x);\n      (_myPlayer$label2 = myPlayer.label) === null || _myPlayer$label2 === void 0 ? void 0 : _myPlayer$label2.setY(player.location.y - 20);\n\n      if (player.location.moving) {\n        sprite.anims.play(`misa-${player.location.rotation}-walk`, true);\n      } else {\n        sprite.anims.stop();\n        sprite.setTexture('atlas', `misa-${player.location.rotation}`);\n      }\n    }\n  }\n\n  getNewMovementDirection() {\n    if (this.cursors.find(keySet => {\n      var _keySet$left;\n\n      return (_keySet$left = keySet.left) === null || _keySet$left === void 0 ? void 0 : _keySet$left.isDown;\n    })) {\n      return 'left';\n    }\n\n    if (this.cursors.find(keySet => {\n      var _keySet$right;\n\n      return (_keySet$right = keySet.right) === null || _keySet$right === void 0 ? void 0 : _keySet$right.isDown;\n    })) {\n      return 'right';\n    }\n\n    if (this.cursors.find(keySet => {\n      var _keySet$down;\n\n      return (_keySet$down = keySet.down) === null || _keySet$down === void 0 ? void 0 : _keySet$down.isDown;\n    })) {\n      return 'front';\n    }\n\n    if (this.cursors.find(keySet => {\n      var _keySet$up;\n\n      return (_keySet$up = keySet.up) === null || _keySet$up === void 0 ? void 0 : _keySet$up.isDown;\n    })) {\n      return 'back';\n    }\n\n    return undefined;\n  }\n\n  update() {\n    if (this.player && this.cursors) {\n      const speed = 175;\n      const prevVelocity = this.player.sprite.body.velocity.clone();\n      const body = this.player.sprite.body; // Stop any previous movement from the last frame\n\n      body.setVelocity(0);\n      const primaryDirection = this.getNewMovementDirection();\n\n      switch (primaryDirection) {\n        case 'left':\n          body.setVelocityX(-speed);\n          this.player.sprite.anims.play('misa-left-walk', true);\n          break;\n\n        case 'right':\n          body.setVelocityX(speed);\n          this.player.sprite.anims.play('misa-right-walk', true);\n          break;\n\n        case 'front':\n          body.setVelocityY(speed);\n          this.player.sprite.anims.play('misa-front-walk', true);\n          break;\n\n        case 'back':\n          body.setVelocityY(-speed);\n          this.player.sprite.anims.play('misa-back-walk', true);\n          break;\n\n        default:\n          // Not moving\n          this.player.sprite.anims.stop(); // If we were moving, pick and idle frame to use\n\n          if (prevVelocity.x < 0) {\n            this.player.sprite.setTexture('atlas', 'misa-left');\n          } else if (prevVelocity.x > 0) {\n            this.player.sprite.setTexture('atlas', 'misa-right');\n          } else if (prevVelocity.y < 0) {\n            this.player.sprite.setTexture('atlas', 'misa-back');\n          } else if (prevVelocity.y > 0) this.player.sprite.setTexture('atlas', 'misa-front');\n\n          break;\n      } // Normalize and scale the velocity so that player can't move faster along a diagonal\n\n\n      this.player.sprite.body.velocity.normalize().scale(speed);\n      const isMoving = primaryDirection !== undefined;\n      this.player.label.setX(body.x);\n      this.player.label.setY(body.y - 20);\n\n      if (!this.lastLocation || this.lastLocation.x !== body.x || this.lastLocation.y !== body.y || this.lastLocation.rotation !== primaryDirection || this.lastLocation.moving !== isMoving) {\n        if (!this.lastLocation) {\n          this.lastLocation = {\n            x: body.x,\n            y: body.y,\n            rotation: primaryDirection || 'front',\n            moving: isMoving\n          };\n        }\n\n        this.lastLocation.x = body.x;\n        this.lastLocation.y = body.y;\n        this.lastLocation.rotation = primaryDirection || 'front';\n        this.lastLocation.moving = isMoving;\n        this.emitMovement(this.lastLocation);\n      }\n    }\n  }\n\n  create() {\n    const map = this.make.tilemap({\n      key: 'map'\n    });\n    /* Parameters are the name you gave the tileset in Tiled and then the key of the\n     tileset image in Phaser's cache (i.e. the name you used in preload)\n     */\n\n    const tileset = map.addTilesetImage('tuxmon-sample-32px-extruded', 'tiles'); // Parameters: layer name (or index) from Tiled, tileset, x, y\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    const belowLayer = map.createStaticLayer('Below Player', tileset, 0, 0);\n    const worldLayer = map.createStaticLayer('World', tileset, 0, 0);\n    worldLayer.setCollisionByProperty({\n      collides: true\n    });\n    const aboveLayer = map.createStaticLayer('Above Player', tileset, 0, 0);\n    /* By default, everything gets depth sorted on the screen in the order we created things.\n     Here, we want the \"Above Player\" layer to sit on top of the player, so we explicitly give\n     it a depth. Higher depths will sit on top of lower depth objects.\n     */\n\n    aboveLayer.setDepth(10); // Object layers in Tiled let you embed extra info into a map - like a spawn point or custom\n    // collision shapes. In the tmx file, there's an object layer with a point named \"Spawn Point\"\n\n    const spawnPoint = map.findObject('Objects', obj => obj.name === 'Spawn Point'); // Create a sprite with physics enabled via the physics system. The image used for the sprite\n    // has a bit of whitespace, so I'm using setSize & setOffset to control the size of the\n    // player's body.\n\n    const sprite = this.physics.add.sprite(spawnPoint.x, spawnPoint.y, 'atlas', 'misa-front').setSize(30, 40).setOffset(0, 24);\n    const label = this.add.text(spawnPoint.x, spawnPoint.y - 20, '(You)', {\n      font: '18px monospace',\n      fill: '#000000',\n      // padding: {x: 20, y: 10},\n      backgroundColor: '#ffffff'\n    });\n    this.player = {\n      sprite,\n      label\n    };\n    this.emitMovement({\n      rotation: 'front',\n      moving: false,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - JB todo\n      x: spawnPoint.x,\n      y: spawnPoint.y\n    }); // Watch the player and worldLayer for collisions, for the duration of the scene:\n\n    this.physics.add.collider(sprite, worldLayer); // Create the player's walking animations from the texture atlas. These are stored in the global\n    // animation manager so any sprite can access them.\n\n    const {\n      anims\n    } = this;\n    anims.create({\n      key: 'misa-left-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-left-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'misa-right-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-right-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'misa-front-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-front-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    anims.create({\n      key: 'misa-back-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-back-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    const camera = this.cameras.main;\n    camera.startFollow(this.player.sprite);\n    camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n    this.cursors.push(this.input.keyboard.createCursorKeys());\n    this.cursors.push(this.input.keyboard.addKeys({\n      up: Phaser.Input.Keyboard.KeyCodes.W,\n      down: Phaser.Input.Keyboard.KeyCodes.S,\n      left: Phaser.Input.Keyboard.KeyCodes.A,\n      right: Phaser.Input.Keyboard.KeyCodes.D\n    }));\n    this.cursors.push(this.input.keyboard.addKeys({\n      up: Phaser.Input.Keyboard.KeyCodes.H,\n      down: Phaser.Input.Keyboard.KeyCodes.J,\n      left: Phaser.Input.Keyboard.KeyCodes.K,\n      right: Phaser.Input.Keyboard.KeyCodes.L\n    })); // Help text that has a \"fixed\" position on the screen\n\n    this.add.text(16, 16, `Arrow keys to move\\nCurrent town: ${this.video.townFriendlyName} (${this.video.coveyTownID})`, {\n      font: '18px monospace',\n      fill: '#000000',\n      padding: {\n        x: 20,\n        y: 10\n      },\n      backgroundColor: '#ffffff'\n    }).setScrollFactor(0).setDepth(30);\n    this.ready = true;\n\n    if (this.players.length) {\n      // Some players got added to the queue before we were ready, make sure that they have\n      // sprites....\n      this.players.forEach(p => this.updatePlayerLocation(p));\n    }\n  }\n\n}\n\nexport default function WorldMap() {\n  _s();\n\n  const video = Video.instance();\n  const {\n    emitMovement,\n    players\n  } = useCoveyAppState();\n  const [gameScene, setGameScene] = useState();\n  useEffect(() => {\n    const config = {\n      type: Phaser.AUTO,\n      parent: 'map-container',\n      minWidth: 800,\n      minHeight: 600,\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: {\n            y: 0\n          } // Top down game, so no gravity\n\n        }\n      }\n    };\n    const game = new Phaser.Game(config);\n\n    if (video) {\n      const newGameScene = new CoveyGameScene(video, emitMovement);\n      setGameScene(newGameScene);\n      game.scene.add('coveyBoard', newGameScene, true);\n    }\n\n    return () => {\n      game.destroy(true);\n    };\n  }, [video, emitMovement]);\n  const deepPlayers = JSON.stringify(players);\n  useEffect(() => {\n    gameScene === null || gameScene === void 0 ? void 0 : gameScene.updatePlayersLocations(players);\n  }, [players, deepPlayers, gameScene]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 10\n  }, this);\n}\n\n_s(WorldMap, \"o04YfM/nK80XgC7nNc6vI4zfmYA=\", false, function () {\n  return [useCoveyAppState];\n});\n\n_c = WorldMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/world/WorldMap.tsx"],"names":["React","useEffect","useState","Phaser","Player","Video","useCoveyAppState","CoveyGameScene","Scene","constructor","video","emitMovement","player","id","players","cursors","lastLocation","ready","preload","load","image","tilemapTiledJSON","atlas","updatePlayersLocations","forEach","p","updatePlayerLocation","disconnectedPlayers","filter","find","disconnectedPlayer","sprite","destroy","label","length","myPlayer","location","rotation","moving","x","y","userName","push","physics","add","setSize","setOffset","text","font","fill","backgroundColor","anims","setX","setY","play","stop","setTexture","getNewMovementDirection","keySet","left","isDown","right","down","up","undefined","update","speed","prevVelocity","body","velocity","clone","setVelocity","primaryDirection","setVelocityX","setVelocityY","normalize","scale","isMoving","create","map","make","tilemap","key","tileset","addTilesetImage","belowLayer","createStaticLayer","worldLayer","setCollisionByProperty","collides","aboveLayer","setDepth","spawnPoint","findObject","obj","name","collider","frames","generateFrameNames","prefix","start","end","zeroPad","frameRate","repeat","camera","cameras","main","startFollow","setBounds","widthInPixels","heightInPixels","input","keyboard","createCursorKeys","addKeys","Input","Keyboard","KeyCodes","W","S","A","D","H","J","K","L","townFriendlyName","coveyTownID","padding","setScrollFactor","WorldMap","instance","gameScene","setGameScene","config","type","AUTO","parent","minWidth","minHeight","default","arcade","gravity","game","Game","newGameScene","scene","deepPlayers","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Phaser from 'phaser';\nimport Player, { UserLocation } from '../../classes/Player';\nimport Video from '../../classes/Video/Video';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\n\n// https://medium.com/@michaelwesthadley/modular-game-worlds-in-phaser-3-tilemaps-1-958fc7e6bbd6\nclass CoveyGameScene extends Phaser.Scene {\n  private player?: {\n    sprite: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody, label: Phaser.GameObjects.Text\n  };\n\n  private id?: string;\n\n  private players: Player[] = [];\n\n  private cursors: Phaser.Types.Input.Keyboard.CursorKeys[] = [];\n\n  private lastLocation?: UserLocation;\n\n  private ready = false;\n\n  private video: Video;\n\n  private emitMovement: (loc: UserLocation) => void;\n\n  constructor(video: Video, emitMovement: (loc: UserLocation) => void) {\n    super('PlayGame');\n    this.video = video;\n    this.emitMovement = emitMovement;\n  }\n\n  preload() {\n    // this.load.image(\"logo\", logoImg);\n    this.load.image('tiles', '/assets/tilesets/tuxmon-sample-32px-extruded.png');\n    this.load.tilemapTiledJSON('map', '/assets/tilemaps/tuxemon-town.json');\n    this.load.atlas('atlas', '/assets/atlas/atlas.png', '/assets/atlas/atlas.json');\n  }\n\n  updatePlayersLocations(players: Player[]) {\n    if (!this.ready) {\n      this.players = players;\n      return;\n    }\n    players.forEach((p) => {\n      this.updatePlayerLocation(p);\n    });\n    // Remove disconnected players from board\n    const disconnectedPlayers = this.players.filter(\n      (player) => !players.find((p) => p.id === player.id),\n    );\n    disconnectedPlayers.forEach((disconnectedPlayer) => {\n      if (disconnectedPlayer.sprite) {\n        disconnectedPlayer.sprite.destroy();\n        disconnectedPlayer.label?.destroy();\n      }\n    });\n    // Remove disconnected players from list\n    if (disconnectedPlayers.length) {\n      this.players = this.players.filter(\n        (player) => !disconnectedPlayers.find(\n          (p) => p.id === player.id,\n        ),\n      );\n    }\n  }\n\n  updatePlayerLocation(player: Player) {\n    let myPlayer = this.players.find((p) => p.id === player.id);\n    if (!myPlayer) {\n      let { location } = player;\n      if (!location) {\n        location = {\n          rotation: 'back',\n          moving: false,\n          x: 0,\n          y: 0,\n        };\n      }\n      myPlayer = new Player(player.id, player.userName, location);\n      this.players.push(myPlayer);\n    }\n    if (this.id !== myPlayer.id && this.physics && player.location) {\n      let { sprite } = myPlayer;\n      if (!sprite) {\n        sprite = this.physics.add\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore - JB todo\n          .sprite(0, 0, 'atlas', 'misa-front')\n          .setSize(30, 40)\n          .setOffset(0, 24);\n        const label = this.add.text(0, 0, myPlayer.userName, {\n          font: '18px monospace',\n          fill: '#000000',\n          backgroundColor: '#ffffff',\n        });\n        myPlayer.label = label;\n        myPlayer.sprite = sprite;\n      }\n      if (!sprite.anims) return;\n      sprite.setX(player.location.x);\n      sprite.setY(player.location.y);\n      myPlayer.label?.setX(player.location.x);\n      myPlayer.label?.setY(player.location.y - 20);\n      if (player.location.moving) {\n        sprite.anims.play(`misa-${player.location.rotation}-walk`, true);\n      } else {\n        sprite.anims.stop();\n        sprite.setTexture('atlas', `misa-${player.location.rotation}`);\n      }\n    }\n  }\n\n  getNewMovementDirection() {\n    if(this.cursors.find(keySet => keySet.left?.isDown)) {\n      return 'left';\n    }\n    if(this.cursors.find(keySet => keySet.right?.isDown)) {\n      return 'right';\n    }\n    if(this.cursors.find(keySet => keySet.down?.isDown)) {\n      return 'front';\n    }\n    if(this.cursors.find(keySet => keySet.up?.isDown)) {\n      return 'back';\n    }\n    return undefined;\n  }\n\n  update() {\n    if (this.player && this.cursors) {\n      const speed = 175;\n      const prevVelocity = this.player.sprite.body.velocity.clone();\n      const body = this.player.sprite.body as Phaser.Physics.Arcade.Body;\n\n      // Stop any previous movement from the last frame\n      body.setVelocity(0);\n\n      const primaryDirection = this.getNewMovementDirection();\n      switch(primaryDirection){\n        case 'left':\n          body.setVelocityX(-speed);\n          this.player.sprite.anims.play('misa-left-walk', true);\n          break;\n        case 'right':\n          body.setVelocityX(speed);\n          this.player.sprite.anims.play('misa-right-walk', true);\n          break;\n        case 'front':\n          body.setVelocityY(speed);\n          this.player.sprite.anims.play('misa-front-walk', true);\n          break;\n        case 'back':\n          body.setVelocityY(-speed);\n          this.player.sprite.anims.play('misa-back-walk', true);\n          break;\n        default:\n          // Not moving\n          this.player.sprite.anims.stop();\n          // If we were moving, pick and idle frame to use\n          if (prevVelocity.x < 0) {\n            this.player.sprite.setTexture('atlas', 'misa-left');\n          } else if (prevVelocity.x > 0) {\n            this.player.sprite.setTexture('atlas', 'misa-right');\n          } else if (prevVelocity.y < 0) {\n            this.player.sprite.setTexture('atlas', 'misa-back');\n          } else if (prevVelocity.y > 0) this.player.sprite.setTexture('atlas', 'misa-front');\n          break;\n      }\n\n\n      // Normalize and scale the velocity so that player can't move faster along a diagonal\n      this.player.sprite.body.velocity.normalize()\n        .scale(speed);\n\n      const isMoving = primaryDirection !== undefined;\n      this.player.label.setX(body.x);\n      this.player.label.setY(body.y - 20);\n      if (!this.lastLocation\n        || this.lastLocation.x !== body.x\n        || this.lastLocation.y !== body.y || this.lastLocation.rotation !== primaryDirection\n        || this.lastLocation.moving !== isMoving) {\n        if (!this.lastLocation) {\n          this.lastLocation = {\n            x: body.x,\n            y: body.y,\n            rotation: primaryDirection || 'front',\n            moving: isMoving,\n          };\n        }\n        this.lastLocation.x = body.x;\n        this.lastLocation.y = body.y;\n        this.lastLocation.rotation = primaryDirection || 'front';\n        this.lastLocation.moving = isMoving;\n        this.emitMovement(this.lastLocation);\n      }\n    }\n  }\n\n  create() {\n    const map = this.make.tilemap({ key: 'map' });\n\n    /* Parameters are the name you gave the tileset in Tiled and then the key of the\n     tileset image in Phaser's cache (i.e. the name you used in preload)\n     */\n    const tileset = map.addTilesetImage('tuxmon-sample-32px-extruded', 'tiles');\n\n    // Parameters: layer name (or index) from Tiled, tileset, x, y\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const belowLayer = map.createStaticLayer('Below Player', tileset, 0, 0);\n    const worldLayer = map.createStaticLayer('World', tileset, 0, 0);\n    worldLayer.setCollisionByProperty({ collides: true });\n    const aboveLayer = map.createStaticLayer('Above Player', tileset, 0, 0);\n    /* By default, everything gets depth sorted on the screen in the order we created things.\n     Here, we want the \"Above Player\" layer to sit on top of the player, so we explicitly give\n     it a depth. Higher depths will sit on top of lower depth objects.\n     */\n    aboveLayer.setDepth(10);\n\n    // Object layers in Tiled let you embed extra info into a map - like a spawn point or custom\n    // collision shapes. In the tmx file, there's an object layer with a point named \"Spawn Point\"\n    const spawnPoint = map.findObject('Objects',\n      (obj) => obj.name === 'Spawn Point') as unknown as\n      Phaser.GameObjects.Components.Transform;\n\n    // Create a sprite with physics enabled via the physics system. The image used for the sprite\n    // has a bit of whitespace, so I'm using setSize & setOffset to control the size of the\n    // player's body.\n    const sprite = this.physics.add\n      .sprite(spawnPoint.x, spawnPoint.y, 'atlas', 'misa-front')\n      .setSize(30, 40)\n      .setOffset(0, 24);\n    const label = this.add.text(spawnPoint.x, spawnPoint.y - 20, '(You)', {\n      font: '18px monospace',\n      fill: '#000000',\n      // padding: {x: 20, y: 10},\n      backgroundColor: '#ffffff',\n    });\n    this.player = {\n      sprite,\n      label\n    };\n\n    this.emitMovement({\n      rotation: 'front',\n      moving: false,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - JB todo\n      x: spawnPoint.x,\n      y: spawnPoint.y,\n    });\n\n    // Watch the player and worldLayer for collisions, for the duration of the scene:\n    this.physics.add.collider(sprite, worldLayer);\n\n    // Create the player's walking animations from the texture atlas. These are stored in the global\n    // animation manager so any sprite can access them.\n    const { anims } = this;\n    anims.create({\n      key: 'misa-left-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-left-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n      }),\n      frameRate: 10,\n      repeat: -1,\n    });\n    anims.create({\n      key: 'misa-right-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-right-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n      }),\n      frameRate: 10,\n      repeat: -1,\n    });\n    anims.create({\n      key: 'misa-front-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-front-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n      }),\n      frameRate: 10,\n      repeat: -1,\n    });\n    anims.create({\n      key: 'misa-back-walk',\n      frames: anims.generateFrameNames('atlas', {\n        prefix: 'misa-back-walk.',\n        start: 0,\n        end: 3,\n        zeroPad: 3,\n      }),\n      frameRate: 10,\n      repeat: -1,\n    });\n\n    const camera = this.cameras.main;\n    camera.startFollow(this.player.sprite);\n    camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n\n    this.cursors.push(this.input.keyboard.createCursorKeys());\n    this.cursors.push(this.input.keyboard.addKeys({up:Phaser.Input.Keyboard.KeyCodes.W,down:Phaser.Input.Keyboard.KeyCodes.S,left:Phaser.Input.Keyboard.KeyCodes.A,right:Phaser.Input.Keyboard.KeyCodes.D}));\n    this.cursors.push(this.input.keyboard.addKeys({up:Phaser.Input.Keyboard.KeyCodes.H,down:Phaser.Input.Keyboard.KeyCodes.J,left:Phaser.Input.Keyboard.KeyCodes.K,right:Phaser.Input.Keyboard.KeyCodes.L}));\n\n    // Help text that has a \"fixed\" position on the screen\n    this.add\n      .text(16, 16, `Arrow keys to move\\nCurrent town: ${this.video.townFriendlyName} (${this.video.coveyTownID})`, {\n        font: '18px monospace',\n        fill: '#000000',\n        padding: {\n          x: 20,\n          y: 10\n        },\n        backgroundColor: '#ffffff',\n      })\n      .setScrollFactor(0)\n      .setDepth(30);\n\n    this.ready = true;\n    if (this.players.length) {\n      // Some players got added to the queue before we were ready, make sure that they have\n      // sprites....\n      this.players.forEach((p) => this.updatePlayerLocation(p));\n    }\n  }\n}\n\nexport default function WorldMap(): JSX.Element {\n  const video = Video.instance();\n  const {\n    emitMovement, players,\n  } = useCoveyAppState();\n  const [gameScene, setGameScene] = useState<CoveyGameScene>();\n  useEffect(() => {\n    const config = {\n      type: Phaser.AUTO,\n      parent: 'map-container',\n      minWidth: 800,\n      minHeight: 600,\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: { y: 0 }, // Top down game, so no gravity\n        },\n      },\n    };\n\n    const game = new Phaser.Game(config);\n    if (video) {\n      const newGameScene = new CoveyGameScene(video, emitMovement);\n      setGameScene(newGameScene);\n      game.scene.add('coveyBoard', newGameScene, true);\n    }\n    return () => {\n      game.destroy(true);\n    };\n  }, [video, emitMovement]);\n\n  const deepPlayers = JSON.stringify(players);\n  useEffect(() => {\n    gameScene?.updatePlayersLocations(players);\n  }, [players, deepPlayers, gameScene]);\n\n  return <div id=\"map-container\"/>;\n}\n"]},"metadata":{},"sourceType":"module"}