{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/VideoProvider/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from 'react';\nimport { SelectedParticipantProvider } from './useSelectedParticipant/useSelectedParticipant';\nimport AttachVisibilityHandler from './AttachVisibilityHandler/AttachVisibilityHandler';\nimport useHandleRoomDisconnectionErrors from './useHandleRoomDisconnectionErrors/useHandleRoomDisconnectionErrors';\nimport useHandleOnDisconnect from './useHandleOnDisconnect/useHandleOnDisconnect';\nimport useHandleTrackPublicationFailed from './useHandleTrackPublicationFailed/useHandleTrackPublicationFailed';\nimport useLocalTracks from './useLocalTracks/useLocalTracks';\nimport useRoom from './useRoom/useRoom';\nimport useScreenShareToggle from './useScreenShareToggle/useScreenShareToggle';\nimport { PresentingProvider } from './usePresenting/usePresenting';\n/*\n *  The hooks used by the VideoProvider component are different than the hooks found in the 'hooks/' directory. The hooks\n *  in the 'hooks/' directory can be used anywhere in a video application, and they can be used any number of times.\n *  the hooks in the 'VideoProvider/' directory are intended to be used by the VideoProvider component only. Using these hooks\n *  elsewhere in the application may cause problems as these hooks should not be used more than once in an application.\n */\n\nexport const VideoContext = /*#__PURE__*/createContext(null);\nexport function VideoProvider({\n  options,\n  children,\n  onError = () => {},\n  onDisconnect = () => {}\n}) {\n  _s();\n\n  const onErrorCallback = error => {\n    // tslint:disable-next-line:no-console\n    console.log(`ERROR: ${error.message}`, error);\n    onError(error);\n  };\n\n  const {\n    audioTrack: localAudioTrack,\n    videoTrack: localVideoTrack,\n    getLocalVideoTrack,\n    getLocalAudioTrack,\n    isAcquiringLocalTracks,\n    removeLocalVideoTrack,\n    removeLocalAudioTrack,\n    getAudioAndVideoTracks\n  } = useLocalTracks();\n  const {\n    room,\n    isConnecting,\n    connect\n  } = useRoom(localAudioTrack, localVideoTrack, onErrorCallback, options); // Register onError and onDisconnect callback functions.\n\n  useHandleRoomDisconnectionErrors(room, onError);\n  useHandleTrackPublicationFailed(room, onError);\n  useHandleOnDisconnect(room, onDisconnect);\n  const [isSharingScreen, toggleScreenShare] = useScreenShareToggle(room, onError);\n  return /*#__PURE__*/_jsxDEV(VideoContext.Provider, {\n    value: {\n      room,\n      localAudioTrack,\n      localVideoTrack,\n      isConnecting,\n      onError: onErrorCallback,\n      onDisconnect,\n      getLocalVideoTrack,\n      getLocalAudioTrack,\n      connect,\n      isAcquiringLocalTracks,\n      removeLocalVideoTrack,\n      removeLocalAudioTrack,\n      isSharingScreen,\n      toggleScreenShare,\n      getAudioAndVideoTracks\n    },\n    children: [/*#__PURE__*/_jsxDEV(SelectedParticipantProvider, {\n      room: room,\n      children: /*#__PURE__*/_jsxDEV(PresentingProvider, {\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AttachVisibilityHandler, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoProvider, \"g5htkFyM3HnUKT8gMuTjXyrRVi4=\", false, function () {\n  return [useLocalTracks, useRoom, useHandleRoomDisconnectionErrors, useHandleTrackPublicationFailed, useHandleOnDisconnect, useScreenShareToggle];\n});\n\n_c = VideoProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoProvider\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/components/VideoProvider/index.tsx"],"names":["React","createContext","SelectedParticipantProvider","AttachVisibilityHandler","useHandleRoomDisconnectionErrors","useHandleOnDisconnect","useHandleTrackPublicationFailed","useLocalTracks","useRoom","useScreenShareToggle","PresentingProvider","VideoContext","VideoProvider","options","children","onError","onDisconnect","onErrorCallback","error","console","log","message","audioTrack","localAudioTrack","videoTrack","localVideoTrack","getLocalVideoTrack","getLocalAudioTrack","isAcquiringLocalTracks","removeLocalVideoTrack","removeLocalAudioTrack","getAudioAndVideoTracks","room","isConnecting","connect","isSharingScreen","toggleScreenShare"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAgD,OAAhD;AAUA,SAASC,2BAAT,QAA4C,iDAA5C;AAEA,OAAOC,uBAAP,MAAoC,mDAApC;AACA,OAAOC,gCAAP,MAA6C,qEAA7C;AACA,OAAOC,qBAAP,MAAkC,+CAAlC;AACA,OAAOC,+BAAP,MAA4C,mEAA5C;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,oBAAP,MAAiC,6CAAjC;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAoBA,OAAO,MAAMC,YAAY,gBAAGV,aAAa,CAAgB,IAAhB,CAAlC;AASP,OAAO,SAASW,aAAT,CAAuB;AAC5BC,EAAAA,OAD4B;AACnBC,EAAAA,QADmB;AACTC,EAAAA,OAAO,GAAG,MAAM,CAAE,CADT;AACWC,EAAAA,YAAY,GAAG,MAAM,CAAE;AADlC,CAAvB,EAEgB;AAAA;;AACrB,QAAMC,eAAe,GAAIC,KAAD,IAAwB;AAC9C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,KAAK,CAACG,OAAQ,EAApC,EAAuCH,KAAvC;AACAH,IAAAA,OAAO,CAACG,KAAD,CAAP;AACD,GAJD;;AAMA,QAAM;AACJI,IAAAA,UAAU,EAAEC,eADR;AAEJC,IAAAA,UAAU,EAAEC,eAFR;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA,sBALI;AAMJC,IAAAA,qBANI;AAOJC,IAAAA,qBAPI;AAQJC,IAAAA;AARI,MASFxB,cAAc,EATlB;AAUA,QAAM;AAAEyB,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA;AAAtB,MAAkC1B,OAAO,CAACe,eAAD,EAAkBE,eAAlB,EAAmCR,eAAnC,EAAoDJ,OAApD,CAA/C,CAjBqB,CAmBrB;;AACAT,EAAAA,gCAAgC,CAAC4B,IAAD,EAAOjB,OAAP,CAAhC;AACAT,EAAAA,+BAA+B,CAAC0B,IAAD,EAAOjB,OAAP,CAA/B;AACAV,EAAAA,qBAAqB,CAAC2B,IAAD,EAAOhB,YAAP,CAArB;AACA,QAAM,CAACmB,eAAD,EAAkBC,iBAAlB,IAAuC3B,oBAAoB,CAACuB,IAAD,EAAOjB,OAAP,CAAjE;AAEA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLiB,MAAAA,IADK;AAELT,MAAAA,eAFK;AAGLE,MAAAA,eAHK;AAILQ,MAAAA,YAJK;AAKLlB,MAAAA,OAAO,EAAEE,eALJ;AAMLD,MAAAA,YANK;AAOLU,MAAAA,kBAPK;AAQLC,MAAAA,kBARK;AASLO,MAAAA,OATK;AAULN,MAAAA,sBAVK;AAWLC,MAAAA,qBAXK;AAYLC,MAAAA,qBAZK;AAaLK,MAAAA,eAbK;AAcLC,MAAAA,iBAdK;AAeLL,MAAAA;AAfK,KADT;AAAA,4BAmBE,QAAC,2BAAD;AAA6B,MAAA,IAAI,EAAEC,IAAnC;AAAA,6BACE,QAAC,kBAAD;AAAA,kBAAqBlB;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBF,eA0BE,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;GAzDeF,a;UAkBVL,c,EACoCC,O,EAGxCJ,gC,EACAE,+B,EACAD,qB,EAC6CI,oB;;;KAzB/BG,a","sourcesContent":["import React, { createContext, ReactNode } from 'react';\nimport {\n  CreateLocalTrackOptions,\n  ConnectOptions,\n  LocalAudioTrack,\n  LocalVideoTrack,\n  Room,\n  TwilioError,\n} from 'twilio-video';\nimport { Callback, ErrorCallback } from '../../types';\nimport { SelectedParticipantProvider } from './useSelectedParticipant/useSelectedParticipant';\n\nimport AttachVisibilityHandler from './AttachVisibilityHandler/AttachVisibilityHandler';\nimport useHandleRoomDisconnectionErrors from './useHandleRoomDisconnectionErrors/useHandleRoomDisconnectionErrors';\nimport useHandleOnDisconnect from './useHandleOnDisconnect/useHandleOnDisconnect';\nimport useHandleTrackPublicationFailed from './useHandleTrackPublicationFailed/useHandleTrackPublicationFailed';\nimport useLocalTracks from './useLocalTracks/useLocalTracks';\nimport useRoom from './useRoom/useRoom';\nimport useScreenShareToggle from './useScreenShareToggle/useScreenShareToggle';\nimport { PresentingProvider } from './usePresenting/usePresenting';\n\n/*\n *  The hooks used by the VideoProvider component are different than the hooks found in the 'hooks/' directory. The hooks\n *  in the 'hooks/' directory can be used anywhere in a video application, and they can be used any number of times.\n *  the hooks in the 'VideoProvider/' directory are intended to be used by the VideoProvider component only. Using these hooks\n *  elsewhere in the application may cause problems as these hooks should not be used more than once in an application.\n */\n\nexport interface IVideoContext {\n  room: Room;\n  localAudioTrack: LocalAudioTrack | undefined;\n  localVideoTrack: LocalVideoTrack | undefined;\n  isConnecting: boolean;\n  connect: (token: string) => Promise<void>;\n  onError: ErrorCallback;\n  onDisconnect: Callback;\n  getLocalVideoTrack: (newOptions?: CreateLocalTrackOptions) => Promise<LocalVideoTrack>;\n  getLocalAudioTrack: (deviceId?: string) => Promise<LocalAudioTrack>;\n  isAcquiringLocalTracks: boolean;\n  removeLocalVideoTrack: () => void;\n  removeLocalAudioTrack: () => void;\n  isSharingScreen: boolean;\n  toggleScreenShare: () => void;\n  getAudioAndVideoTracks: () => Promise<void>;\n}\n\nexport const VideoContext = createContext<IVideoContext>(null!);\n\ninterface VideoProviderProps {\n  options?: ConnectOptions;\n  onError: ErrorCallback;\n  onDisconnect?: Callback;\n  children: ReactNode;\n}\n\nexport function VideoProvider({\n  options, children, onError = () => {}, onDisconnect = () => {},\n}: VideoProviderProps) {\n  const onErrorCallback = (error: TwilioError) => {\n    // tslint:disable-next-line:no-console\n    console.log(`ERROR: ${error.message}`, error);\n    onError(error);\n  };\n\n  const {\n    audioTrack: localAudioTrack,\n    videoTrack: localVideoTrack,\n    getLocalVideoTrack,\n    getLocalAudioTrack,\n    isAcquiringLocalTracks,\n    removeLocalVideoTrack,\n    removeLocalAudioTrack,\n    getAudioAndVideoTracks,\n  } = useLocalTracks();\n  const { room, isConnecting, connect } = useRoom(localAudioTrack, localVideoTrack, onErrorCallback, options);\n\n  // Register onError and onDisconnect callback functions.\n  useHandleRoomDisconnectionErrors(room, onError);\n  useHandleTrackPublicationFailed(room, onError);\n  useHandleOnDisconnect(room, onDisconnect);\n  const [isSharingScreen, toggleScreenShare] = useScreenShareToggle(room, onError);\n\n  return (\n    <VideoContext.Provider\n      value={{\n        room,\n        localAudioTrack,\n        localVideoTrack,\n        isConnecting,\n        onError: onErrorCallback,\n        onDisconnect,\n        getLocalVideoTrack,\n        getLocalAudioTrack,\n        connect,\n        isAcquiringLocalTracks,\n        removeLocalVideoTrack,\n        removeLocalAudioTrack,\n        isSharingScreen,\n        toggleScreenShare,\n        getAudioAndVideoTracks,\n      }}\n    >\n      <SelectedParticipantProvider room={room}>\n        <PresentingProvider>{children}</PresentingProvider>\n      </SelectedParticipantProvider>\n      {/*\n        The AttachVisibilityHandler component is using the useLocalVideoToggle hook\n        which must be used within the VideoContext Provider.\n      */}\n      <AttachVisibilityHandler />\n    </VideoContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}