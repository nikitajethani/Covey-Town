{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport useVideoContext from '../useVideoContext/useVideoContext';\n/*\n  Returns the participant that is sharing their screen (if any). This hook assumes that only one participant\n  can share their screen at a time.\n*/\n\nexport default function useScreenShareParticipant() {\n  _s();\n\n  const {\n    room\n  } = useVideoContext();\n  const [screenShareParticipant, setScreenShareParticipant] = useState();\n  useEffect(() => {\n    if (room.state === 'connected') {\n      const updateScreenShareParticipant = () => {\n        setScreenShareParticipant(Array.from(room.participants.values()) // the screenshare participant could be the localParticipant\n        .concat(room.localParticipant).find(participant => Array.from(participant.tracks.values()).find(track => track.trackName.includes('screen'))));\n      };\n\n      updateScreenShareParticipant();\n      room.on('trackPublished', updateScreenShareParticipant);\n      room.on('trackUnpublished', updateScreenShareParticipant);\n      room.on('participantDisconnected', updateScreenShareParticipant); // the room object does not emit 'trackPublished' events for the localParticipant,\n      // so we need to listen for them here.\n\n      room.localParticipant.on('trackPublished', updateScreenShareParticipant);\n      room.localParticipant.on('trackUnpublished', updateScreenShareParticipant);\n      return () => {\n        room.off('trackPublished', updateScreenShareParticipant);\n        room.off('trackUnpublished', updateScreenShareParticipant);\n        room.off('participantDisconnected', updateScreenShareParticipant);\n        room.localParticipant.off('trackPublished', updateScreenShareParticipant);\n        room.localParticipant.off('trackUnpublished', updateScreenShareParticipant);\n      };\n    }\n\n    return () => {};\n  }, [room]);\n  return screenShareParticipant;\n}\n\n_s(useScreenShareParticipant, \"z9lVWi5Fca0c3/Pd5bqUR6sVNuQ=\", false, function () {\n  return [useVideoContext];\n});","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/components/VideoCall/VideoFrontend/hooks/useScreenShareParticipant/useScreenShareParticipant.tsx"],"names":["useEffect","useState","useVideoContext","useScreenShareParticipant","room","screenShareParticipant","setScreenShareParticipant","state","updateScreenShareParticipant","Array","from","participants","values","concat","localParticipant","find","participant","tracks","track","trackName","includes","on","off"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,yBAAT,GAAqC;AAAA;;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAWF,eAAe,EAAhC;AACA,QAAM,CAACG,sBAAD,EAAyBC,yBAAzB,IAAsDL,QAAQ,EAApE;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,IAAI,CAACG,KAAL,KAAe,WAAnB,EAAgC;AAC9B,YAAMC,4BAA4B,GAAG,MAAM;AACzCF,QAAAA,yBAAyB,CACvBG,KAAK,CAACC,IAAN,CAAwBN,IAAI,CAACO,YAAL,CAAkBC,MAAlB,EAAxB,EACA;AADA,SAEGC,MAFH,CAEUT,IAAI,CAACU,gBAFf,EAGGC,IAHH,CAGSC,WAAD,IAA8BP,KAAK,CAACC,IAAN,CAA6BM,WAAW,CAACC,MAAZ,CAAmBL,MAAnB,EAA7B,EAA0DG,IAA1D,CAAgEG,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,QAAzB,CAA1E,CAHtC,CADuB,CAAzB;AAMD,OAPD;;AAQAZ,MAAAA,4BAA4B;AAE5BJ,MAAAA,IAAI,CAACiB,EAAL,CAAQ,gBAAR,EAA0Bb,4BAA1B;AACAJ,MAAAA,IAAI,CAACiB,EAAL,CAAQ,kBAAR,EAA4Bb,4BAA5B;AACAJ,MAAAA,IAAI,CAACiB,EAAL,CAAQ,yBAAR,EAAmCb,4BAAnC,EAb8B,CAe9B;AACA;;AACAJ,MAAAA,IAAI,CAACU,gBAAL,CAAsBO,EAAtB,CAAyB,gBAAzB,EAA2Cb,4BAA3C;AACAJ,MAAAA,IAAI,CAACU,gBAAL,CAAsBO,EAAtB,CAAyB,kBAAzB,EAA6Cb,4BAA7C;AACA,aAAO,MAAM;AACXJ,QAAAA,IAAI,CAACkB,GAAL,CAAS,gBAAT,EAA2Bd,4BAA3B;AACAJ,QAAAA,IAAI,CAACkB,GAAL,CAAS,kBAAT,EAA6Bd,4BAA7B;AACAJ,QAAAA,IAAI,CAACkB,GAAL,CAAS,yBAAT,EAAoCd,4BAApC;AAEAJ,QAAAA,IAAI,CAACU,gBAAL,CAAsBQ,GAAtB,CAA0B,gBAA1B,EAA4Cd,4BAA5C;AACAJ,QAAAA,IAAI,CAACU,gBAAL,CAAsBQ,GAAtB,CAA0B,kBAA1B,EAA8Cd,4BAA9C;AACD,OAPD;AAQD;;AACD,WAAO,MAAM,CAAG,CAAhB;AACD,GA9BQ,EA8BN,CAACJ,IAAD,CA9BM,CAAT;AAgCA,SAAOC,sBAAP;AACD;;GArCuBF,yB;UACLD,e","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Participant, TrackPublication } from 'twilio-video';\nimport useVideoContext from '../useVideoContext/useVideoContext';\n\n/*\n  Returns the participant that is sharing their screen (if any). This hook assumes that only one participant\n  can share their screen at a time.\n*/\nexport default function useScreenShareParticipant() {\n  const { room } = useVideoContext();\n  const [screenShareParticipant, setScreenShareParticipant] = useState<Participant>();\n\n  useEffect(() => {\n    if (room.state === 'connected') {\n      const updateScreenShareParticipant = () => {\n        setScreenShareParticipant(\n          Array.from<Participant>(room.participants.values())\n          // the screenshare participant could be the localParticipant\n            .concat(room.localParticipant)\n            .find((participant: Participant) => Array.from<TrackPublication>(participant.tracks.values()).find((track) => track.trackName.includes('screen'))),\n        );\n      };\n      updateScreenShareParticipant();\n\n      room.on('trackPublished', updateScreenShareParticipant);\n      room.on('trackUnpublished', updateScreenShareParticipant);\n      room.on('participantDisconnected', updateScreenShareParticipant);\n\n      // the room object does not emit 'trackPublished' events for the localParticipant,\n      // so we need to listen for them here.\n      room.localParticipant.on('trackPublished', updateScreenShareParticipant);\n      room.localParticipant.on('trackUnpublished', updateScreenShareParticipant);\n      return () => {\n        room.off('trackPublished', updateScreenShareParticipant);\n        room.off('trackUnpublished', updateScreenShareParticipant);\n        room.off('participantDisconnected', updateScreenShareParticipant);\n\n        room.localParticipant.off('trackPublished', updateScreenShareParticipant);\n        room.localParticipant.off('trackUnpublished', updateScreenShareParticipant);\n      };\n    }\n    return () => { };\n  }, [room]);\n\n  return screenShareParticipant;\n}\n"]},"metadata":{},"sourceType":"module"}