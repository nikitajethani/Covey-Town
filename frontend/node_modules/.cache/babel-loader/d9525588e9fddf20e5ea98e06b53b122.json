{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button, FormControl, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure } from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\n\nconst Chat = () => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    socket,\n    messageHistory,\n    players,\n    userName,\n    unseenMessages\n  } = useCoveyAppState();\n  const [message, setMessage] = useState('');\n  const [receiver, setReceiver] = useState('');\n  const [currentPlayers, setCurrentPlayers] = useState([]); // const [currentUnseen, setUnseen] = useState<integer>(0);\n  // const [currentMessages, setCurrentMessages] = useState<MessageFormat>();\n  // console.log(currentUnseen);\n\n  const openChat = useCallback(() => {\n    onOpen();\n    socket === null || socket === void 0 ? void 0 : socket.emit('looking at messages');\n  }, [onOpen]);\n  const closeChat = useCallback(() => {\n    onClose();\n  }, [onClose]);\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a, b) => a.userName < b.userName ? -1 : 1));\n  }, [players]); // const updateUnseen = useCallback(() => {\n  //   setUnseen(unseenMessages);\n  //   console.log(currentUnseen);\n  // }, [unseenMessages]);\n  // const updateMessageHistory = useCallback(() => {\n  //   setCurrentMessages(messageHistory);\n  // }, [messageHistory]);\n\n  useEffect(() => {\n    updatePlayers(); // updateUnseen();\n\n    const timer = setInterval(updatePlayers, 2000); // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer); // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n\n  const processUpdates = async () => {\n    if (receiver === 'Everyone') {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPublicMessage', message, userName);\n    } else {\n      socket === null || socket === void 0 ? void 0 : socket.emit('sendPrivateMessage', message, receiver, userName);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      \"data-testid\": \"openMenuButton\",\n      onClick: openChat,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onClose: closeChat,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          pb: 6,\n          children: [players === null || players === void 0 ? void 0 : players.map(player => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", player.userName, \" \"]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: messageHistory === null || messageHistory === void 0 ? void 0 : messageHistory.messageHistory.map(msg => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" \", msg.from, \" to \", msg.to, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 55\n              }, this), \" \", msg.message, \"  \"]\n            }, msg.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              htmlFor: \"friendlyName\",\n              children: \"To\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              id: \"friendlyName\",\n              placeholder: \"To\",\n              name: \"receiver\",\n              value: receiver,\n              onChange: ev => setReceiver(ev.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              id: \"message\",\n              placeholder: \"Message...\",\n              name: \"message\",\n              value: message,\n              onChange: ev => setMessage(ev.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            \"data-testid\": \"sendbutton\",\n            colorScheme: \"blue\",\n            mr: 3,\n            value: \"send\",\n            name: \"action1\",\n            onClick: () => processUpdates(),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Chat, \"wQaLMtvb2MpvJAC5Qd55xD0gSCQ=\", false, function () {\n  return [useDisclosure, useCoveyAppState];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs-4530-covey/frontend/src/components/Chat/Chat.tsx"],"names":["React","useCallback","useEffect","useState","Button","FormControl","FormLabel","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useDisclosure","MenuItem","Typography","useCoveyAppState","Chat","isOpen","onOpen","onClose","socket","messageHistory","players","userName","unseenMessages","message","setMessage","receiver","setReceiver","currentPlayers","setCurrentPlayers","openChat","emit","closeChat","updatePlayers","sort","a","b","timer","setInterval","clearInterval","processUpdates","map","player","id","msg","from","to","ev","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport useCoveyAppState from '../../hooks/useCoveyAppState';\nimport Player from '../../classes/Player';\nimport { MessageFormat } from '../../CoveyTypes';\n\nconst Chat: React.FunctionComponent = () => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n  const {socket, messageHistory, players, userName, unseenMessages} = useCoveyAppState();\n  const [message, setMessage] = useState<string>('');\n  const [receiver, setReceiver] = useState<string>('');\n  const [currentPlayers, setCurrentPlayers] = useState<Player[]>([]);\n  // const [currentUnseen, setUnseen] = useState<integer>(0);\n  // const [currentMessages, setCurrentMessages] = useState<MessageFormat>();\n\n  // console.log(currentUnseen);\n  \n  const openChat = useCallback(()=>{\n    onOpen();\n    socket?.emit('looking at messages');\n  }, [onOpen]);\n\n  const closeChat = useCallback(()=>{\n    onClose();\n  }, [onClose]);\n\n\n  const updatePlayers = useCallback(() => {\n    setCurrentPlayers(players.sort((a,b) => a.userName < b.userName ? -1:1));\n  }, [players]);\n\n  // const updateUnseen = useCallback(() => {\n  //   setUnseen(unseenMessages);\n  //   console.log(currentUnseen);\n  // }, [unseenMessages]);\n\n  // const updateMessageHistory = useCallback(() => {\n  //   setCurrentMessages(messageHistory);\n  // }, [messageHistory]);\n\n  useEffect(() => {\n    updatePlayers();\n    // updateUnseen();\n    const timer = setInterval(updatePlayers, 2000);\n    // const timer3 = setInterval(updateUnseen, 2000);\n    // const timer2 = setInterval(updateMessageHistory, 2000);\n\n    return () => {\n      clearInterval(timer);\n      // clearInterval(timer2);\n      // clearInterval(timer3);\n    };\n  }, [updatePlayers]);\n  \n  const processUpdates = async () =>{\n    if (receiver === 'Everyone') {\n      socket?.emit('sendPublicMessage', message, userName);\n    } else {\n      socket?.emit('sendPrivateMessage', message, receiver, userName)\n    } \n  };\n\n  return <>\n    <MenuItem data-testid='openMenuButton' onClick={openChat}>\n      <Typography variant=\"body1\">Chat</Typography>\n    </MenuItem>\n    <Modal isOpen={isOpen} onClose={closeChat}>\n      <ModalOverlay/>\n      <ModalContent>\n        <ModalHeader>Chat</ModalHeader>\n        <ModalCloseButton/>\n          <ModalBody pb={6}>\n            \n            {players?.map((player) => ( \n              <p key={player.id}> {player.userName} </p>))}  \n\n            <div>\n            {messageHistory?.messageHistory.map((msg) => ( \n              <p key={msg.id}> {msg.from} to {msg.to} <br /> {msg.message}  </p>\n            ))} \n            </div>\n          </ModalBody>\n          <ModalFooter>\n          <FormControl>\n            <FormLabel htmlFor='friendlyName'>To</FormLabel>\n              <Input id='friendlyName' placeholder=\"To\" name=\"receiver\" value={receiver} onChange={(ev)=>setReceiver(ev.target.value)} />\n            </FormControl>\n            <FormControl>\n              <Input id='message' placeholder=\"Message...\" name=\"message\" value={message} onChange={(ev)=>setMessage(ev.target.value)} />\n            </FormControl>\n            <Button data-testid='sendbutton' colorScheme=\"blue\" mr={3} value=\"send\" name='action1' onClick={()=>processUpdates()}>\n              Send\n            </Button>\n          </ModalFooter>\n      </ModalContent>\n    </Modal>\n  </>\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}