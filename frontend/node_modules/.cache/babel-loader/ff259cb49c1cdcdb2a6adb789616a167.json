{"ast":null,"code":"/* eslint-disable no-console */\nexport default class DebugLogger {\n  constructor(prefix) {\n    this.prefix = prefix;\n    this.enabled = false;\n  }\n\n  enable() {\n    this.enabled = true;\n  }\n\n  disable() {\n    this.enabled = false;\n  }\n\n  get isEnabled() {\n    return this.enabled;\n  }\n\n  prefixMessage(msg) {\n    return `${DebugLogger.getTimeString(new Date())} [${this.prefix}]: ${msg}`;\n  }\n\n  info(msg, ...params) {\n    if (this.enabled) {\n      console.info(this.prefixMessage(msg), ...params);\n    }\n  }\n\n  warn(msg, ...params) {\n    if (this.enabled) {\n      console.warn(this.prefixMessage(msg), ...params);\n    }\n  }\n\n  error(msg, ...params) {\n    console.error(this.prefixMessage(msg), ...params);\n  }\n\n  static getTimeString(time) {\n    const hours = time.getHours().toString().padStart(2, '0');\n    const minutes = time.getMinutes().toString().padStart(2, '0');\n    const seconds = time.getSeconds().toString().padStart(2, '0');\n    const milliseconds = time.getMilliseconds().toString().padStart(3, '0');\n    return `${hours}:${minutes}:${seconds}.${milliseconds}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/nikitajethani/Desktop/cs 4530/covey.town-master/frontend/src/classes/DebugLogger.ts"],"names":["DebugLogger","constructor","prefix","enabled","enable","disable","isEnabled","prefixMessage","msg","getTimeString","Date","info","params","console","warn","error","time","hours","getHours","toString","padStart","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds"],"mappings":"AAAA;AAEA,eAAe,MAAMA,WAAN,CAAkB;AAG/BC,EAAAA,WAAW,CACDC,MADC,EAET;AAAA,SADQA,MACR,GADQA,MACR;AAAA,SAJMC,OAIN,GAJgB,KAIhB;AACD;;AAEDC,EAAAA,MAAM,GAAS;AACb,SAAKD,OAAL,GAAe,IAAf;AACD;;AAEDE,EAAAA,OAAO,GAAS;AACd,SAAKF,OAAL,GAAe,KAAf;AACD;;AAED,MAAIG,SAAJ,GAAyB;AACvB,WAAO,KAAKH,OAAZ;AACD;;AAEDI,EAAAA,aAAa,CAACC,GAAD,EAAsB;AACjC,WAAQ,GAAER,WAAW,CAACS,aAAZ,CAA0B,IAAIC,IAAJ,EAA1B,CAAsC,KAAI,KAAKR,MAAO,MAAKM,GAAI,EAAzE;AACD;;AAEDG,EAAAA,IAAI,CAACH,GAAD,EAAc,GAAGI,MAAjB,EAAsC;AACxC,QAAI,KAAKT,OAAT,EAAkB;AAChBU,MAAAA,OAAO,CAACF,IAAR,CAAa,KAAKJ,aAAL,CAAmBC,GAAnB,CAAb,EAAsC,GAAGI,MAAzC;AACD;AACF;;AAEDE,EAAAA,IAAI,CAACN,GAAD,EAAc,GAAGI,MAAjB,EAAsC;AACxC,QAAI,KAAKT,OAAT,EAAkB;AAChBU,MAAAA,OAAO,CAACC,IAAR,CAAa,KAAKP,aAAL,CAAmBC,GAAnB,CAAb,EAAsC,GAAGI,MAAzC;AACD;AACF;;AAEDG,EAAAA,KAAK,CAACP,GAAD,EAAc,GAAGI,MAAjB,EAAsC;AACzCC,IAAAA,OAAO,CAACE,KAAR,CAAc,KAAKR,aAAL,CAAmBC,GAAnB,CAAd,EAAuC,GAAGI,MAA1C;AACD;;AAED,SAAOH,aAAP,CAAqBO,IAArB,EAAyC;AACvC,UAAMC,KAAK,GAAGD,IAAI,CAACE,QAAL,GAAgBC,QAAhB,GAA2BC,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CAAd;AACA,UAAMC,OAAO,GAAGL,IAAI,CAACM,UAAL,GAAkBH,QAAlB,GAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAhB;AACA,UAAMG,OAAO,GAAGP,IAAI,CAACQ,UAAL,GAAkBL,QAAlB,GAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAhB;AACA,UAAMK,YAAY,GAAGT,IAAI,CAACU,eAAL,GAAuBP,QAAvB,GAAkCC,QAAlC,CAA2C,CAA3C,EAA8C,GAA9C,CAArB;AAEA,WAAQ,GAAEH,KAAM,IAAGI,OAAQ,IAAGE,OAAQ,IAAGE,YAAa,EAAtD;AACD;;AA/C8B","sourcesContent":["/* eslint-disable no-console */\n\nexport default class DebugLogger {\n  private enabled = false;\n\n  constructor(\n    private prefix: string,\n  ) {\n  }\n\n  enable(): void {\n    this.enabled = true;\n  }\n\n  disable(): void {\n    this.enabled = false;\n  }\n\n  get isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  prefixMessage(msg: string): string {\n    return `${DebugLogger.getTimeString(new Date())} [${this.prefix}]: ${msg}`;\n  }\n\n  info(msg: string, ...params: any[]): void {\n    if (this.enabled) {\n      console.info(this.prefixMessage(msg), ...params);\n    }\n  }\n\n  warn(msg: string, ...params: any[]): void {\n    if (this.enabled) {\n      console.warn(this.prefixMessage(msg), ...params);\n    }\n  }\n\n  error(msg: string, ...params: any[]): void {\n    console.error(this.prefixMessage(msg), ...params);\n  }\n\n  static getTimeString(time: Date): string {\n    const hours = time.getHours().toString().padStart(2, '0');\n    const minutes = time.getMinutes().toString().padStart(2, '0');\n    const seconds = time.getSeconds().toString().padStart(2, '0');\n    const milliseconds = time.getMilliseconds().toString().padStart(3, '0');\n\n    return `${hours}:${minutes}:${seconds}.${milliseconds}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}